<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Алексей Пахунов</title>
    <link>https://blog.not-a-kernel-guy.com/</link>
    <description>Recent content on Алексей Пахунов</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Wed, 09 Dec 2020 19:51:49 -0800</lastBuildDate>
    
        <atom:link href="https://blog.not-a-kernel-guy.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Испытательный полет SN8 на 12.5 км</title>
      <link>https://blog.not-a-kernel-guy.com/2020/12/09/sn8/</link>
      <pubDate>Wed, 09 Dec 2020 19:51:49 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/12/09/sn8/</guid>
      <description>&lt;p&gt;Сегодня был отличный день. Испытательный полет SN8 на 12.5 км прошел гораздо лучше, чем
я ожидал. Да и шоу получилось просто отменное. В этом полете испытывалось много нового:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Полет на трех движках. Раптор еще не летал в такой конфигурации. После F9 это кажется
тривиальной вещью, но одни только акустические нагрузки чего стоят.&lt;/li&gt;
&lt;li&gt;Выключение движков в полете, суммарный вектор тяги которых не соосен с продольной
осью ракеты.&lt;/li&gt;
&lt;li&gt;Переворот на пике траектории.&lt;/li&gt;
&lt;li&gt;Планирование &amp;ldquo;на пузе&amp;rdquo;. Насколько я понимаю, этого в мире еще никто не пробовал, тем
более с ракетой такой размерности. Я ожидал, что неприятности начнутся именно на этом
этапе. Тем более удивительно, что планирование прошло как по маслу.&lt;/li&gt;
&lt;li&gt;Включение двигателей для посадки &amp;ldquo;лежа на боку&amp;rdquo;. Топливо в баках при этом
скапливается на боку ракеты - его туда толкает ускорение от торможения в атмосфере.
При посадке первой ступени F9 топливо естественным образом стекает в топливоприемник
(не уверен на счет терминологии).&lt;/li&gt;
&lt;li&gt;Переворот в последнюю секунду перед посадкой. Неудача на этом этапе была второй
наиболее вероятной причиной неудачи по моим предположениям до теста.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Мелкие неприятности с низкой тягой при посадке и, как следствие, красивым взрывом
на посадочной площадке - это совершенно не проблема. Мы это уже порешали с при посадке
F9, порешаем и здесь.&lt;/p&gt;

&lt;p&gt;А пока - наслаждайтесь красивым зрелищем (T-0 в 1:48:12):&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ap-BkkrRg-o&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;P.S. А вот еще шикарный вид снизу на маневр переворота при посадке:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Starship landing flip maneuver &lt;a href=&#34;https://t.co/QuD9HwZ9CX&#34;&gt;pic.twitter.com/QuD9HwZ9CX&lt;/a&gt;&lt;/p&gt;&amp;mdash; SpaceX (@SpaceX) &lt;a href=&#34;https://twitter.com/SpaceX/status/1336849897987796992?ref_src=twsrc%5Etfw&#34;&gt;December 10, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>Фонтанный код</title>
      <link>https://blog.not-a-kernel-guy.com/2020/09/06/fountain-codes/</link>
      <pubDate>Sun, 06 Sep 2020 15:23:17 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/09/06/fountain-codes/</guid>
      <description>&lt;p&gt;Недавно совершенно случайно узнал про &lt;a href=&#34;https://en.wikipedia.org/wiki/Fountain_code&#34;&gt;фонтанный код&lt;/a&gt; и поразился насколько
элегантно работает этот алгоритм. Этот код позволяет надежно передавать данные
по каналу с потерями без обратной связи и с минимальными накладными расходами.
Более того передатчик и приемник не обязаны синхронизировать начало и конец
передачи данных. Фонтанный код позволяет передатчику генерировать бесконечный
поток пакетов, кодирующих исходное сообщение, а приемник может начать слушать в
любой момент. Все что требуется - это принять минимально необходимое для
декодирования количество пакетов. &lt;a href=&#34;https://en.wikipedia.org/wiki/Raptor_code&#34;&gt;Raptor code&lt;/a&gt;, - одна из наиболее
практичных реализаций, требует всего лишь передать всего 0.2% дополнительных
пакетов для успешного декодирования с вероятностью 0.999999. При этом
вероятность успешного декодирования стремительно приближается к единице с каждым
дополнительным пакетом.&lt;/p&gt;

&lt;p&gt;Зачем это нужно когда уже есть протоколы надежной передачи по двухстороннему
каналу, скажем тот же TCP/IP? Оказывается существует ситуации, когда организация
обратного канала связи требует изобретения машины времени. Когда нам нужно
восстановить данные со сбойного сектора на жестком диске, мы не можем послать
“запрос на повторную передачу” в прошлое - в то время, когда сектор нормально
читался. Все что мы можем сделать - это записать избыточные данные в другой
сектор или на другой диск заранее.&lt;/p&gt;

&lt;p&gt;Бывает и так, что организация обратной связи осложнена практическими
ограничениями. Обратный канал связи может быть слишком дорог и/или слишком
медленен. Задержка передачи сигнала с Земли на космический аппарат и обратно
может составлять от секунд (орбита Луны) до часов (Вояждеры, Пионеры, Кассини,
Новые горизонты, и т.д.) и требует многометровых параболических антенн. Если
посчитать &lt;a href=&#34;http://bradhedlund.com/2008/12/19/how-to-calculate-tcp-throughput-for-long-distance-links/&#34;&gt;пропускную способность TCP/IP&lt;/a&gt; для связи с Луной, то получится,
что с настройками по-умолчанию (и вне зависимости от реальной ширины канала)
скорость передачи данных будет не более 175 Kbps.&lt;/p&gt;

&lt;p&gt;Вообще сценариев, когда помехоустойчивое кодирование выгоднее запросов на
повторную передачу - масса. Передача данных по радиоканалу, высокоскоростная
передача данных, высокочастотная торговля на бирже, синхронизация часов по сети,
системы глобального позиционирования и т.д. Во многих из них фонтанный код может
быть хорошим выбором.&lt;/p&gt;

&lt;p&gt;Алгоритм работы фонтанного кода на удивление прост. Исходное сообщение
разбивается на блоки одинакового размера пронумерованные от 1 до k. Каждый
исходящий пакет генерируется так:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Передатчик выбирает степень связности пакета d в диапазоне от 1 до k.&lt;/li&gt;
&lt;li&gt;Передатчик выбирает d случайных блоков из исходного сообщения и складывает их
по модулю 2 (xor).&lt;/li&gt;
&lt;li&gt;Результат сложения вместе информацией об исходных блоках посылается
приемнику.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Процедура декодирования не намного сложнее. Для каждого входящего пакета
выполняются следующие шаги:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Пакет помещается в очередь еще не декодированных пакетов вместе со списком
исходных блоков.&lt;/li&gt;
&lt;li&gt;Каждый уже декодированный исходный блок складывается по модулю 2 с пакетом и
удаляется из списка.&lt;/li&gt;
&lt;li&gt;Если в списке исходных блоков остался только один блок, то содержимое пакета
и есть исходный блок. Блок помечается как декодированный. Пакет удаляется из
очереди.&lt;/li&gt;
&lt;li&gt;Блок, декодированный на предыдущем шаге, складывается со всеми пакетами из
очереди, ссылающимися на него. Это, в свою очередь, может привести к
декодированию других пакетов и т.д.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Процесс декодирования легче проследить на конкретном примере. Предположим
приемник получил пять однобайтовых пакетов. На рисунке снизу полученные пакеты
показаны слева; исходные блоки, которые нужно восстановить, - справа. Четвертый
пакет содержит только второй исходный блок, что позволяет сразу его
декодировать:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2020/09/fountain-step1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Декодированный исходный блок складывается с первом пакетом по модулю 2 (2^3=1),
так как они связаны:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2020/09/fountain-step2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь первый исходный блок может быть также декодирован:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2020/09/fountain-step3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Это, в свою очередь позволяет декодировать исходные блоки 3 и 4 (1^5=4, 1^2=3):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2020/09/fountain-step4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;И, наконец, последний исходный блок тоже может быть декодирован:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2020/09/fountain-step5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Заметьте, что передатчик и приемник могут передавать и получать пакеты в любом
порядке и приемнику совершенно не требуется собрать непрерывную
последовательность пакетов. Также, и это не очевидно на первый взгляд, передача
информации о связях между пакетами и исходными блоками не требует заметных
накладных расходов. Передатчик и приемник могут просто использовать заранее
известную псевдослучайную последовательность чисел и передавать номер пакета в
этой последовательности.&lt;/p&gt;

&lt;p&gt;Я рекомендую прочитать
&lt;a href=&#34;https://docs.switzernet.com/people/emin-gabrielyan/060112-capillary-references/ref/MacKay05.pdf&#34;&gt;подробный анализ нескольких разновидностей фонтанного кода&lt;/a&gt; за авторством
Дэвида Макая. Легко заметить, что способность фонтанного кода восстанавливать
потерянные пакеты зависит от того, как выбирается степень связности d для
каждого пакета. С одной стороны, для того чтобы начать декодирование приемник
должен получить хотя бы один пакет со степенью связности 1. С другой стороны,
пакеты с большими степенями связности позволяют приемнику восстанавливать данные
из потерянных пакетов.&lt;/p&gt;

&lt;p&gt;В своей работе Дэвид начинает разбор с простой модели, которая просто генерирует
K случайных бит для каждого пакета и добавляет исходный блок i к пакету в
случае, если бит с номером i установлен в единицу. Такая модель обладает
довольно неплохими способностями к восстановлению потерянных данных, однако она
требует значительных вычислительных затрат при больших K (вычислительная
сложность алгоритма - O(K^3)).&lt;/p&gt;

&lt;p&gt;Далее автор переходит к разбору &lt;a href=&#34;https://en.wikipedia.org/wiki/Luby_transform_code&#34;&gt;LT code&lt;/a&gt;, который уменьшает количество
связей между пакетами и исходными блоками, тем самым снижая вычислительную
сложность алгоритма до O(K log K). Эта схема базируется на наблюдении, что в
идеальном случае, на каждой итерации у приемника будет только один пакет со
степенью связности 1 и декодирование очередного исходного блока будет приводить
к появлению очередного пакета со степенью связности 1.&lt;/p&gt;

&lt;p&gt;Следующая разновидность фонтанного кода, - &lt;a href=&#34;https://en.wikipedia.org/wiki/Raptor_code&#34;&gt;Raptor code&lt;/a&gt;, улучшает
вычислительную сложность до O(K). Иными словами, вычислительная сложность это
алгоритма растет от размена исходного сообщения точно также, как растет
вычислительная сложность &lt;code&gt;memcpy()&lt;/code&gt;! Raptor code использует LT code со средней
степенью связности около 3 (вместо log K). Это означает, что приемник увидит
много пакетов с малой степенью связности, но некоторые исходные блоки не будут
связаны ни с одним пакетом и, соответственно, не смогут быть восстановлены.
Raptor code красиво обходит это ограничение с помощью двухступенчатого
кодирования: сначала исходные данные кодируются
&lt;a href=&#34;https://en.wikipedia.org/wiki/Low-density_parity-check_code&#34;&gt;кодом с малой плотностью проверок на чётность (LDPC)&lt;/a&gt;, а затем слабым LT
кодом. Параметры LDPC подбираются так, чтобы он мог восстановить данные, не
восстановленные LT кодом. Получается, что Raptor code объединяет способность
LDPC гарантированно восстанавливать данные (с определенным уровнем потерь) со
способностью LT кода восстанавливать данные при любом уровне потерь.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5053&#34;&gt;Raptor code&lt;/a&gt; и &lt;a href=&#34;https://tools.ietf.org/html/rfc6330&#34;&gt;RaptorQ code&lt;/a&gt; стандартизированы &lt;a href=&#34;https://www.ietf.org/&#34;&gt;Инженерным советом
Интернета&lt;/a&gt; и способны крайне эффективно восстанавливать данные. Например
RaptorQ гарантирует следующую вероятность доставки исходного сообщения:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Более 0.99 после получения K пакетов&lt;/li&gt;
&lt;li&gt;Более 0.9999 после получения K+1 пакетов&lt;/li&gt;
&lt;li&gt;Более 0.999999 после получения K+2 пакетов&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Правами на Raptor code и RaptorQ code обладает Qualcomm, Inc., однако согласно
&lt;a href=&#34;https://datatracker.ietf.org/ipr/1957/&#34;&gt;IPR 1957&lt;/a&gt; и &lt;a href=&#34;https://datatracker.ietf.org/ipr/2554/&#34;&gt;IPR 2554&lt;/a&gt; Qualcomm, Inc. обязуется либо выдавать лицензию
либо не предъявлять претензий (в зависимости от того, где используется
лицензируемый протокол).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Пепелац</title>
      <link>https://blog.not-a-kernel-guy.com/2020/08/04/butterfly/</link>
      <pubDate>Tue, 04 Aug 2020 22:06:55 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/08/04/butterfly/</guid>
      <description>&lt;div style=&#34;font-style: italic; text-align: right&#34;&gt;Корабли висели в небе точно так же, как не могут кирпичи.&lt;br/&gt;
Дуглас Адамс, «Автостопом по галактике»&lt;/div&gt;

&lt;p&gt;В Бока Чике сегодня летало. Громко, основательно, и очень сюрреалистично. Моих
литературных талантов не хватает, чтобы описать это событие по достоинству. Стальная
бочка высотой в десятиэтажный дом, с карикатурными мультяшными ножками, вальяжно
отрывается от стартового стола, походу разнося его в щепки, и возносится в небо с
грацией троллейбуса&amp;hellip; Нет, не могу. Смотрите сами:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/s1HA9LlFNM0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;Вместе с тем этот полет - это очень серьезная веха в разработке корабля. Причем важен
даже не сам полет (хотя и он тоже), но все что происходило при подготовке к нему. Все
переносы, многочисленные попытки и остановки обратного отсчета в последнюю секунду. Это
можно сравнить с периодом времени, когда программа уже компилируется, но еще не
работает.&lt;/p&gt;

&lt;p&gt;Другой ракурс:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/EXm76nZG-so&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;Вообще интересно, насколько круто снимают &amp;ldquo;через забор&amp;rdquo; любители космоса. Прикиньте, что
эти люди потратили свой отпуск на то, чтобы просидеть у болота непонятно сколько дней
на жаре в ожидании успешного теста; приволокли кучу дальнобойных камер; раздобыли
шустрый интернет в 40 минутах езды от ближайшего приличного города; и выложили отснятый
материал в интернет.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/ugVZ41USN_0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Flight Software AMA</title>
      <link>https://blog.not-a-kernel-guy.com/2020/06/05/flight-software-ama/</link>
      <pubDate>Fri, 05 Jun 2020 20:47:13 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/06/05/flight-software-ama/</guid>
      <description>&lt;p&gt;Команда Flight Software будет &lt;a href=&#34;https://www.reddit.com/r/spacex/comments/gxb7j1/we_are_the_spacex_software_team_ask_us_anything/&#34;&gt;отвечать на вопросы про то, как SpaceX разрабатывает
программное обеспечение для Crew Dragon на reddit.com&lt;/a&gt; в субботу 6 июня 2020 с 12:00
до 13:30 по тихоокеанскому времени (в субботу с 22:00 до 23:30 по киевскому времени).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Армянское радио</title>
      <link>https://blog.not-a-kernel-guy.com/2020/06/01/armyanskoe-radio/</link>
      <pubDate>Mon, 01 Jun 2020 18:46:46 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/06/01/armyanskoe-radio/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.not-a-kernel-guy.com/2020/05/30/trampoline/&#34;&gt;Успешный запуск пилотируемого Дракона к Международной космической станции&lt;/a&gt;
заслуженно вызвал повышенное внимание со стороны как средств массовой информации, так и
простых смертных. Как-никак такие события случаются нечасто. Повышенное внимание, хотя
и менее заслуженное, не обошло стороной и этот блог. И теперь мой почтовый ящик лопается
от поздравлений и запросов на интервью. Что гораздо хуже, известие о том, что в SpaceX
работает украинец вызвало нешуточный ажиотаж в Facebook и волну слухов один другого
забавнее. Позвольте мне прокомментировать моменты, которые, по всей видимости, вызвали
наибольший интерес.&lt;/p&gt;

&lt;p&gt;Но перед тем как начать, позвольте от всего сердца поблагодарить за все присланные
поздравления, пожелания и высказанную поддержку. Поверьте, и моим коллегам и мне очень
приятно знать, что наша работа высоко оценивается и вызывает живой интерес. Спасибо
огромное и извините, что далеко не всегда могу удовлетворить ваше любопытство.&lt;/p&gt;

&lt;p&gt;Ну, поехали. Честно говоря, никак не думал, что подобное нужно отдельно уточнять, но
оказывается нужно. Нет, я не &amp;ldquo;пишу всё программное обеспечение которое отвечает за
полёт Crew Dragon&amp;rdquo;. Программное обеспечение, обеспечивающие полет Crew Dragon
создавалось не одной сотней людей в течении многих лет. Помимо всего прочего, это
программное обеспечение включает в себя версию Linux. Я специально проверял - я
совершенно точно не писал Linux. Там какой-то финский паренёк отметился.&lt;/p&gt;

&lt;p&gt;Самое смешное, что я и разработке ПО &lt;a href=&#34;https://en.wikipedia.org/wiki/Dragon_2&#34;&gt;Dragon&lt;/a&gt; никогда отношения не имел. Раньше я
писал софт для &lt;a href=&#34;https://en.wikipedia.org/wiki/Falcon_9&#34;&gt;Falcon 9&lt;/a&gt; и &lt;a href=&#34;https://en.wikipedia.org/wiki/Falcon_Heavy&#34;&gt;Falcon Heavy&lt;/a&gt;, а теперь - для &lt;a href=&#34;https://en.wikipedia.org/wiki/SpaceX_Starship&#34;&gt;Starship&lt;/a&gt;. Само
собой, так как софт для всех четырех собирается из одной кодовой базы, то часть моего
кода используется при полете Dragon.&lt;/p&gt;

&lt;p&gt;Идем дальше. Нет, моя должность не называется &amp;ldquo;главный разработчик&amp;rdquo;. Главный
инженер (Chief Designer) у нас - Илон Маск собственной персоной. &amp;ldquo;Sr. Software
Engineer&amp;rdquo; - это всего лишь &amp;ldquo;разработчик обыкновенный, просто опытный&amp;rdquo;. Эта должность
не предполагает руководства людьми. Для этого есть менеджеры и руководители групп
(скажем Lead Software Engineer) :-)&lt;/p&gt;

&lt;p&gt;Я действительно отвечал за первую удачную посадку первой ступени Falcon 9 и запуск
Falcon Heavy. Правда я на 98% уверен, что это факт интерпретируется совершенно не
совпадающим с реальностью способом. В SpaceX активно используется понятие &amp;ldquo;Responsible
Engineer&amp;rdquo; (&amp;ldquo;ответственный инженер&amp;rdquo;, &amp;ldquo;RE&amp;rdquo;). Ответственный инженер координирует
взаимодействие разных групп в той или иной области. Например, инженер отвечающий за
автоматическую систему прерывания полета отвечат за то, чтобы Range получил все данные,
нужные для сертификации, чтобы полетный правила прошли определенный набор тестов, чтобы
чуваки из Flight Software выбрали правильный протокол для навигационных данных, чтобы
операторы добавили процедуру включения и проверки в нужное место пусковой
последовательности. Задача ответственного инженера состоит не в том, чтобы сделать всю
работу самому, а в том, чтобы вся работа (в одной определенной области) была сделана
теми, кто должен её сделать. Баз такого ответственного инженера легко забыть как-нибудь
важную, но малозаметную деталь. Например, запросто можно подключить только один конец
кабеля или забыть выполнить какой-то важный тест.&lt;/p&gt;

&lt;p&gt;На каждый запуск назначается ответственный инженер от каждый группы, обеспечивающий
запуск. Я был инженером, отвечающим за запуск F9-21 (первая успешная посадка), FH-1
(первый запуск Falcon Heavy) и нескольких других запусков от группы Flight Software.
Помимо прочего, я отвечал за то, чтобы полетный софт, загруженный на ракету, включал в
себя все запланированные изменения и прошел все необходимые тесты. Большинство людей,
которых вы видите в центре управления полетом, - ответственные инженеры назначенные от
разных групп.&lt;/p&gt;

&lt;p&gt;Далее, я обратил внимание, что у многих подгорело на счет моей биографии. Я веду этот
блог по-русски, я родился и вырос в Украине, у меня русская фамилия, я живу в США. Если
я не ошибаюсь, я сумел обидеть каждым из этих простых фактов хотя бы одного человека.
Хорошо, что я хотя бы не рыжий. :-)&lt;/p&gt;

&lt;p&gt;Почему-то людей зацепила вот эта фраза:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Я стараюсь, по возможности, сторонится политики. Главным образом из-за крайне
низкого КПД подобных споров. А уж после событий последних лет &amp;#8211; так и
подавно. Так что, пожалуйста, не разводите политику в комментариях &amp;#8211;
буду банить нещадно, а самое главное &amp;#8211; предвзято. Ну, я предупредил. :-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Нет, я понимаю, что в 2014 году был аннексирован Крым и началась война. Но, на
минуточку, этот блог существует с 2006 года, а эта фраза - с 2007, если я не ошибаюсь.
Я даже нашел вот такой комментарий датированный январем 2007 года:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Обычно я стараюсь избегать “священных войн”. По уровню полезности рассуждения на темы
вроде “Windows против *nix” или “Microsoft против Open Source Community” я
приравниваю к спорам про политику. И те и другие одинаково быстро скатываются в
эмоции, где оппоненты больше заинтересованы в уничтожении друг друга, чем в выяснении
истины.&lt;/p&gt;

&lt;p&gt;Этот блог не исключение из этого правила. Все подобные темы я стараюсь рассматривать
только с технической точки зрения: как это сделано, почему, зачем и что это даёт
пользователю. Темы, которые не удаётся свести к сугубо технической части, я обсуждать
не буду, уж извините. И уж тем более я не хочу копаться в грязном белье: суды,
нечестная конкуренция и т.п.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Как видите, и здесь идет речь о неприятии политики в этом блоге. Так что, господа,
полегче со своими проекциями.&lt;/p&gt;

&lt;p&gt;Закончу на положительной ноте. Один из частых вопросов - а много ли других выходцев из
стран бывшего Союза заботает в SpaceX. Да дофига. Есть много украинцев, есть много
россиян, есть масса людей из других стран. Как и в любой большой американской компании.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Батут</title>
      <link>https://blog.not-a-kernel-guy.com/2020/05/30/trampoline/</link>
      <pubDate>Sat, 30 May 2020 12:45:32 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/05/30/trampoline/</guid>
      <description>&lt;p&gt;Боб Бенкен и Даг Хёрли успешно вышли на орбиту!&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/bIZsnKGV8TE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;Вы не поверите скольких усилий это стоило. Это гораздо сложнее, чем может показаться.&lt;/p&gt;

&lt;p&gt;Следующая остановка - Starship? :-)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SN4 RIP</title>
      <link>https://blog.not-a-kernel-guy.com/2020/05/29/sn4/</link>
      <pubDate>Fri, 29 May 2020 23:01:39 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/05/29/sn4/</guid>
      <description>&lt;p&gt;Не могу не поделится. Живой комментарий происходящего на видео совершенно бесподобен.
Как раз в нужный момент и не в бровь, а в глаз. К сожалению, при переводе теряется вся
прелесть, так что если у кого с английским не очень - извиняйте:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;RIP Starship SN4 😭&lt;a href=&#34;https://t.co/klPMtZHxjW&#34;&gt;https://t.co/klPMtZHxjW&lt;/a&gt; &lt;a href=&#34;https://t.co/hrrElBXmSC&#34;&gt;pic.twitter.com/hrrElBXmSC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Chris B - NSF (@NASASpaceflight) &lt;a href=&#34;https://twitter.com/NASASpaceflight/status/1266442087848960000?ref_src=twsrc%5Etfw&#34;&gt;May 29, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;Немного контекста к происходящему на видео. Где-то через две минуты после очередного
(кажется третьего) огневого испытания прототипа Starship с серийным номером 4, &amp;ldquo;что-то
пошло не так&amp;rdquo; самым захватывающим образом.&lt;/p&gt;

&lt;p&gt;На полном видео ниже включение двигателя в 1:22:33, огненный шар - в 1:24:48.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/7YaFsUWgN3s&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Нанимает ли SpaceX из-за рубежа?</title>
      <link>https://blog.not-a-kernel-guy.com/2020/05/24/job-at-spacex/</link>
      <pubDate>Sun, 24 May 2020 12:21:54 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/05/24/job-at-spacex/</guid>
      <description>&lt;p&gt;Мне с завидной регулярностью задают один и тот же вопрос: &amp;ldquo;Нанимает ли SpaceX из-за
рубежа?&amp;rdquo; Я решил оформить ответ в виде поста, чтобы можно было на него ссылаться в
будущем.&lt;/p&gt;

&lt;p&gt;Ниже следует мое личное мнение. Пожалуйста, не воспринимайте его как буквальное
руководство к действию. Короче, &amp;ldquo;This is not a legal advice. Talk to your lawyer&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;В силу своего рода деятельности SpaceX попадает под действие законов, ограничивающих
экспорт некоторых технологий: &lt;a href=&#34;https://www.pmddtc.state.gov/ddtc_public?id=ddtc_public_portal_itar_landing&#34;&gt;ITAR&lt;/a&gt; и &lt;a href=&#34;https://www.bis.doc.gov/index.php/regulations/export-administration-regulations-ear&#34;&gt;EAR&lt;/a&gt;. Под экспортом в данном случае
подразумевается как буквальный перевоз образцов технологий, информации и т.п., так и
передача информации лицам, не являющимся &amp;ldquo;U.S. persons&amp;rdquo;, без пересечения границы.
&amp;ldquo;U.S. person&amp;rdquo; считаются граждане США, постоянные жители (люди с green card), некоторые
категории беженцев, а также американские компании и госструктуры. Интересно, что
граждане США, работающие на иностранную компанию, тоже не считаются &amp;ldquo;U.S. persons&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;В нашем случае важно, что постоянные резиденты входят в категорию &amp;ldquo;U.S. persons&amp;rdquo; вне
зависимости от наличия других гражданств. Люди с рабочей визой (H-1B, L-1, и т.д.)
считаются иностранцами со всему вытекающими.&lt;/p&gt;

&lt;p&gt;Для того, чтобы нанять иностранца, нужно выполнить две формальности:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Оформить работнику рабочую визу.&lt;/li&gt;
&lt;li&gt;Оформить разрешение от State Department, позволяющее работнику иметь дело с
конкретным списком технологий, защищенных ITAR.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Спрос на рабочие визы уже &lt;a href=&#34;https://redbus2us.com/h1b-visa-cap-reach-dates-history-graphs-uscis-data/&#34;&gt;много лет превышает выделенную годовую квоту&lt;/a&gt;. Поэтому
каждый апрель проводится лотерея, которая определят кто получит визу в следующем
финансовом году. Т.е. лотерея в апреле 2020 года определяет кто сможет въехать в страну
начиная с 1 октября 2020 года. Вероятность выиграть лотерею в этом году около 30%. У
выпускников американских вузов с дипломом магистра - немного выше, у всех остальных -
немного ниже. Помимо H-1B есть и другие визы, разрешающие работу (L-1, разные категории
O и прочие).&lt;/p&gt;

&lt;p&gt;Итого, оформление рабочей визы компанией иностранному работнику означает более
полгода ожидания и менее трети вероятности успеха. Дополнительно, требуется отдельная
лицензия от Госдепартамента. Я не знаю точно, какие требования нужно удовлетворить для
получения этой лицензии. По слухам этот процесс занимает несколько месяцев, чему я
склонен верить. Оформление иммиграционных бумаг обычно занимает много времени.&lt;/p&gt;

&lt;p&gt;Дополнительно напомню, что &lt;a href=&#34;https://www.treasury.gov/resource-center/sanctions/Programs/Pages/ukraine.aspx&#34;&gt;отдельные российские граждане, определенные компании, и
некоторые секторы экономики находятся под сакциями&lt;/a&gt; за отжим Крыма. Не берусь судить
влияет ли этот факт на выдачу ITAR лицензии &amp;ldquo;обычному гражданину&amp;rdquo;, но наверное может.&lt;/p&gt;

&lt;p&gt;Есть и другой вариант. Компания может спонсировать вид на жительство будущему работнику.
Для этого, кстати, работнику совершенно не нужно находится в США либо работать на
компанию - это популярное заблуждение. После получения вида на жительство, работник
попадает в категорию &amp;ldquo;US person&amp;rdquo; и может спокойно работать.&lt;/p&gt;

&lt;p&gt;Срок оформления зеленой карты вещь малопредсказуемая, но даже в легких случаях
(женитьба) оформление документов занимает минимум год. К примеру, на данный момент
категория EB2 (требуется диплом магистра) считается &amp;ldquo;current&amp;rdquo;. Это значит, что
работодатель может подавать петицию I-140 прямо сейчас. А вот из претендентов на EB3
(большинство программистов) могут подавать только те, кто застолбил очередь три года
назад (01JAN17).&lt;/p&gt;

&lt;p&gt;Наиболее надежный вариант попасть на работу в SpaceX из-за рубежа выглядит так:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Будущий кандидат получает вид на жительство в США любым законным способом. Жениться
быстрее всего. Оформить вид на жительство через крутую компанию удобнее всего.
&amp;ldquo;Хоть тушкой, хоть чучелом&amp;rdquo; - тоже можно.&lt;/li&gt;
&lt;li&gt;Как только вид на жительство получен, кандидат устраивается на работу, как в любую
другую американскую компанию.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Пройти этот квест долго и сложно, но возможно. Что подтверждается тем, сколько разных
акцентов можно услышать в офисе на 1 Rocket Road.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Контрольная сумма UDP</title>
      <link>https://blog.not-a-kernel-guy.com/2020/04/11/udp-checksum/</link>
      <pubDate>Sat, 11 Apr 2020 21:16:34 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/04/11/udp-checksum/</guid>
      <description>&lt;p&gt;Большинство проектов, над которыми я когда-либо работал, так или иначе
не работают без передачи данных по сети. Последним проектом не
выходящим за рамки одного компьютера была поддержка &lt;a href=&#34;https://blog.not-a-kernel-guy.com/tags/wow64/&#34;&gt;Wow64&lt;/a&gt; в ядре
Windows. Тем не менее возится с кодом, непосредственно обрабатывающим IP
пакеты мне довелось всего пару раз. Оба раза я столкнулся с одной и той
же ошибкой вычисления контрольных сумм в IP стеке. В одном случае,
сетевая карта ошибочно помечала хорошие пакеты как испорченные. В другом -
две библиотеки, написанные разными людьми, неверно вычисляли контрольную
сумму некоторых пакетов. Одна из библиотек широко использовалась в
&amp;ldquo;боевых&amp;rdquo; условиях. Немного удивительно, что ошибка оставалась незамеченной
так долго.&lt;/p&gt;

&lt;p&gt;Корнями этот баг уходит в 1980-й год, когда был опубликована &lt;a href=&#34;https://tools.ietf.org/html/rfc768&#34;&gt;спецификация
протокола UDP&lt;/a&gt;. Чтобы разобраться в чем заключается ошибка, нужно
сначала разобраться как работают контрольные суммы в IP стеке. В IPv4 пакете
есть две контрольные суммы: контрольная сумма IPv4 заголовка и контрольная
сумма протокола следующего уровня (UDP, TCP, ICMP, и т.п.). Контрольная
сумма IPv4 заголовка защищает только IPv4 заголовок. Контрольная сумма
протокола следующего уровня защищает тело пакета и некоторые поля из
заголовка.&lt;/p&gt;

&lt;p&gt;Контрольная сумма IPv4 заголовка вычисляется по &lt;a href=&#34;https://tools.ietf.org/html/rfc791&#34;&gt;такому алгоритму&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The checksum field is the 16 bit one&amp;rsquo;s complement of the one&amp;rsquo;s
complement sum of all 16 bit words in the header.  For purposes of
computing the checksum, the value of the checksum field is zero.&lt;/p&gt;

&lt;p&gt;Поле контрольной суммы - 16 битное дополнение до единицы суммы всех 16
битных слов, вычисленной в обратном коде. Для целей вычисления контрольной
суммы, значение поля контрольной суммы считается равным нулю.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;В переводе с птичьего на человеческий это означает вот что. &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D1%82%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4&#34;&gt;Обратный код&lt;/a&gt; -
это способ представления чисел в двоичном коде. В отличие от более привычного
&lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%94%D0%BE%D0%BF%D0%BE%D0%BB%D0%BD%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4&#34;&gt;дополнительного кода&lt;/a&gt;, обратный код использует два разных представления
нуля: положительный и отрицательный ноль. Инвертирование числа дает то же
самое число с обратным знаком:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    0111    +7
    0110    +6
    0101    +5
    0100    +4
    0011    +3
    0010    +2
    0001    +1
    0000    +0  # положительный ноль
    1111    -0  # отрицательный ноль
    1110    -1
    1101    -2
    1100    -3
    1011    -4
    1010    -5
    1001    -6
    1000    -7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Чтобы получить правильный результат при сложении двух чисел в обратном коде,
перенос из старшего разряда просто прибавляется к сумме:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    0110    +6
  + 1101    -2
  ------
    0011    +3
  +    1        # перенос из старшего разряда
  ------
    0100    +4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;сумма всех 16 битных слов, вычисленной в обратном коде&amp;rdquo; - означает не что
иное, как сумму всех 16 битных слов заголовка выполненную по вышеописанному
правилу. &amp;ldquo;16 битное дополнение до единицы суммы&amp;rdquo; - указывает, что
после вычисления суммы всех 16 битных слов заголовка, полученное значение
инвертируется.&lt;/p&gt;

&lt;p&gt;Такой алгоритм позволяет проверить пакет просто вычислив сумму всех 16 битных
слов заголовка (включая поле контрольной суммы). Если результат равен нулю -
пакет не поврежден. Что более важно, он позволяет легко обновить контрольную
сумму, при изменении только некоторый полей заголовка, не вычисляя её заново.
Это свойство было полезно при создании высокопроизводительных IP
маршрутизаторов.&lt;/p&gt;

&lt;p&gt;Написать и протестировать код, реализующий этот алгоритм, казалось бы можно
за пол-часа, с перерывом на кофе. Однако эта простота обманчива. Существуют
&lt;em&gt;три&lt;/em&gt; RFC, поясняющие неочевидные детали инкрементального обновления
контрольной суммы: &lt;a href=&#34;https://tools.ietf.org/html/rfc1071&#34;&gt;RFC 1071&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc1141&#34;&gt;RFC 1141&lt;/a&gt;, &lt;a href=&#34;https://tools.ietf.org/html/rfc1624&#34;&gt;RFC 1624&lt;/a&gt;. В &lt;em&gt;каждом&lt;/em&gt; из
этих документов &lt;a href=&#34;https://www.rfc-editor.org/errata_search.php?rfc=1071&#34;&gt;были&lt;/a&gt; &lt;a href=&#34;https://www.rfc-editor.org/errata_search.php?rfc=1141&#34;&gt;исправлены&lt;/a&gt; &lt;a href=&#34;https://www.rfc-editor.org/errata_search.php?rfc=1624&#34;&gt;ошибки&lt;/a&gt;, найденные после их
опубликования.&lt;/p&gt;

&lt;p&gt;Как я уже упоминал выше, в каждом IPv4 пакете есть две контрольные суммы.
Пока что мы обсудили только контрольную сумму заголовка IPv4 пакета.
Вторая контрольная сумма (UDP или TCP) вычисляется по &lt;a href=&#34;https://tools.ietf.org/html/rfc768&#34;&gt;&lt;em&gt;другому&lt;/em&gt; алгоритму&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Checksum is the 16-bit one&amp;rsquo;s complement of the one&amp;rsquo;s complement sum of a
pseudo header of information from the IP header, the UDP header, and the
data,  padded  with zero octets  at the end (if  necessary)  to  make  a
multiple of two octets.&lt;/p&gt;

&lt;p&gt;If the computed  checksum  is zero,  it is transmitted  as all ones (the
equivalent  in one&amp;rsquo;s complement  arithmetic).   An all zero  transmitted
checksum  value means that the transmitter  generated  no checksum  (for
debugging or for higher level protocols that don&amp;rsquo;t care).&lt;/p&gt;

&lt;p&gt;Контрольная сумма - 16 битное дополнение до единицы суммы псевдо заголовка,
заполненного информацией из IP заголовка, UDP заголовка и данных,
выровненных до границы двух байт.&lt;/p&gt;

&lt;p&gt;Если вычисленная сумма равна нулю, она передается как все единицы (
эквивалентное значение в дополнительном коде). Нулевая контрольная сумма
в пакете означает что передающая сторона не указала контрольную сумму
(в целях отладки или при использовании протоколов более высокого уровня
которым все равно).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;На первый взгляд этот алгоритм сильно отличается от алгоритма вычисления
контрольной суммы заголовка IPv4, но при внимательном рассмотрении оказывается,
что оба алгоритма очень похожи. Первый абзац фактически описывает ту же
самую инвертированную сумму 16-битных слов в обратном коде. Единственное
отличие - это диапазон данных (псевдо заголовок, UDP заголовок и данные вместо
IPv4 заголовка), которые покрываются контрольной суммой.&lt;/p&gt;

&lt;p&gt;Настоящее отличие кроется во втором абзаце. Если его перефразировать, то
он утверждает, что контрольная сумма UDP необязательна. Передающая сторона
может просто передать ноль вместо вычисления контрольной суммы. В случае
если вычисленная контрольная сумма получается равной нулю, то она передается
как &lt;code&gt;-0&lt;/code&gt;, т.е. 0xffff. Фраза &amp;ldquo;эквивалентное значение в дополнительном коде&amp;rdquo;
специально уточняет, что два разных значения в дополнительном коде (&lt;code&gt;+0&lt;/code&gt; и
&lt;code&gt;-0&lt;/code&gt;) соответствуют нулю и такая замена разрешена.&lt;/p&gt;

&lt;p&gt;Именно здесь и скрывается баг. Дело в том, что при сложении чисел в обратном
коде единственный способ способ получить значение 0x0000 (&lt;code&gt;+0&lt;/code&gt;) - это сложить
&lt;code&gt;+0&lt;/code&gt; и &lt;code&gt;+0&lt;/code&gt;. Любая другая комбинация чисел дает результат от 0x0001 (&lt;code&gt;+1&lt;/code&gt;)
до 0xffff (&lt;code&gt;-0&lt;/code&gt;). Любой корректный IP пакет содержит ненулевые байты, что
гарантирует, что сумма 16-битных полей корректного пакета не будет равна
0x0000 (&lt;code&gt;+0&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Итак сумма не может равняться &lt;code&gt;+0&lt;/code&gt; и 0x0000 используется как зарезервированное
значение - пока что все сходится, разве нет? А вот и нет. Мы забыли, что
вычисленная сумма инвертируется при передаче. Получается вот такой странный
специальный случай:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Сумма полей     Контрольная     Поле контрольной
# пакета          сумма           суммы в пакете

0x0001            0xfffe          0xfffe
0x0002            0xfffd          0xfffd
0x0003            0xfffc          0xfffc
...
0xfffd            0x0002          0x0002
0xfffe            0x0001          0x0001
0xffff            0x0000          0xffff  &amp;lt;-- ???
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Получается, что спецификация подставляет подножку разработчикам и заставляет
их на ровном месте добавлять в код обработку специального случая. Программисты
с удовольствием наступают на эти грабли и пишут код, обрабатывающий этот
случай неправильно. Я видел обе вариации этой ошибки. В одном случае
контрольная сумма UDP пакета вычислялась по алгоритму для IPv4. В другом
случае было ровно наоборот, - неправильно вычислялась контрольная сумма
заголовка IP пакета. А ведь достаточно было бы взять другое зарезервированное
значение для обозначения невычисленной контрольной суммы - 0xffff (&lt;code&gt;-0&lt;/code&gt;) и
желаемое поведение получилось бы естественным образом безо всяких ухищрений.&lt;/p&gt;

&lt;p&gt;Забавно, что одна из причин по которым это баг может оставаться незамеченным
долгое время это то, что в большинстве случаем вычисление контрольных сумм
переносится с центрального процессора на сетевую карту (checksum offloading).
Соответственно ошибочный код просто не выполняется. Другая причина заключается
в том, что эта ошибка в среднем затрагивает один пакет из 65535 (0.0015%
пакетов).&lt;/p&gt;

&lt;p&gt;В заключение добавлю, что алгоритма вычисления контрольной суммы один из
немногих примеров &amp;ldquo;промышленного&amp;rdquo; кода. который тривиально поддается 100%
проверке полным перебором. Там всего-навсего 65536 возможных значений.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Новый штамм людей</title>
      <link>https://blog.not-a-kernel-guy.com/2020/03/07/new-strain/</link>
      <pubDate>Sat, 07 Mar 2020 12:28:58 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/03/07/new-strain/</guid>
      <description>&lt;p&gt;Актуальная статья 2015 года: &lt;a href=&#34;https://www.newyorker.com/humor/borowitz-report/scientists-earth-endangered-by-new-strain-of-fact-resistant-humans/amp&#34;&gt;&amp;ldquo;Земля находится под угрозой нового штамма устойчивых к
фактам людей&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Миннеаполис (&lt;a href=&#34;https://www.newyorker.com/humor/borowitz-report?intcid=inline_amp&#34;&gt;Отчет Боровица&lt;/a&gt;) - Ученые обнаружили новый сильный штамм устойчивых к
фактам людей, который являются угрозой существованию жизни на Земле, - говорится в
новом отрезвляющем исследовании.&lt;/p&gt;

&lt;p&gt;Исследование, проведенное университетом Миннесоты, идентифицирует опасный штамм людей,
обладающих практически полным иммунитетом к любой форме поддающихся проверке знаний,
оставляя ученых безо всякой возможности бороться с ними.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Эти люди обладают всеми способностями необходимыми чтобы получать и обрабатывать
информацию&amp;rdquo;, - утверждает Дэвис Логсдон, один из авторов исследования. &amp;ldquo;Тем не менее,
каким-то образом, они развили защитные механизмы, которые фактически полностью
нейтрализовали эти способности&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Еще больше беспокоит то, что, по словам Логдона, - &amp;ldquo;большее количество фактов привело
только к усилению механизмов, защищающих от этих фактов&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Ученые еще далеки от полного понимания механизмов, которые не позволяют
факто-устойчивым людям усваивать информацию. Одна из гипотез предполагает, что штамм
приобрел способность перехватывать информацию в процессе её передачи от слухового
нерва к мозгу. &amp;ldquo;Нормальная функциональность человеческого сознания была полностью
аннулирована&amp;rdquo;, заявил Логсдон.&lt;/p&gt;

&lt;p&gt;Подтверждая мрачные результаты исследования, Логсдон выразил надежду, что угроза
штамма факто-устойчивых людей может быть преодолена в будущем. &amp;ldquo;Наше исследование
находится на очень ранней стадии, однако существует возможность, что они станут более
восприимчивы к фактам как только они окажутся в среде без еды, воды и кислорода&amp;rdquo;,
сказал исследователь.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Соединение Луны и Марса</title>
      <link>https://blog.not-a-kernel-guy.com/2020/02/18/moon-mars-clouds/</link>
      <pubDate>Tue, 18 Feb 2020 22:02:34 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/02/18/moon-mars-clouds/</guid>
      <description>&lt;p&gt;Композитная фотография соединения Луны и Марса (сделанная вскоре после окончания
покрытия Марса Луной) за авторством &lt;a href=&#34;https://www.instagram.com/cosmic_background/&#34;&gt;Эндрю Маккарти&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.not-a-kernel-guy.com/2020/02/3tn9874prqh41.jpg&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2020/02/3tn9874prqh41_small.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Последнее предложение</title>
      <link>https://blog.not-a-kernel-guy.com/2020/01/27/final-offer/</link>
      <pubDate>Mon, 27 Jan 2020 23:12:45 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/01/27/final-offer/</guid>
      <description>&lt;p&gt;Наткнулся на канал короткометражных фантастических фильмов &lt;a href=&#34;https://www.youtube.com/channel/UC7sDT8jZ76VLV1u__krUutA&#34;&gt;DUST&lt;/a&gt;. Понравилось.
Рекомендую.&lt;/p&gt;

&lt;p&gt;Например, хороший фильм про бюрократию и про то, почему важно всегда читать
контракты перед тем, как их подписывать:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/rv8kOzRZK8g&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Очередное фиаско</title>
      <link>https://blog.not-a-kernel-guy.com/2020/01/19/ifa/</link>
      <pubDate>Sun, 19 Jan 2020 19:48:37 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2020/01/19/ifa/</guid>
      <description>&lt;p&gt;Читаю обсуждение сегодняшнего &lt;a href=&#34;https://www.youtube.com/watch?v=mu5Ydz34oVc&#34;&gt;теста системы аварийного спасения Crew Dragon&lt;/a&gt;
и чуть-ли не в голос ржу. &amp;ldquo;Ракета взорвалась&amp;rdquo;, &amp;ldquo;вторую ступень не спасли&amp;rdquo;, а
&amp;ldquo;корабль уцелел&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2020/01/ifa_breaking_news.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Картинка - это стёб, если что. :-) А вот, остальные фразы - не очень.&lt;/p&gt;

&lt;p&gt;Doug Jensen выложил шикарное видео, показывающее момент разделения и взрыв.
Смотреть обязательно:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/06svtpboEJs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>&#34;Великий поход&#34;, или туда и обратно</title>
      <link>https://blog.not-a-kernel-guy.com/2019/12/29/cz-8/</link>
      <pubDate>Sun, 29 Dec 2019 21:21:21 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2019/12/29/cz-8/</guid>
      <description>&lt;p&gt;Это, конечно, прошлогодние новости, но до меня эта картинка дошла только сейчас.&lt;/p&gt;

&lt;p&gt;Китай с пристальным интересом поглядывает на повторное использование ступеней
ракет. В 2017 году свет увидела презентация &amp;ldquo;первого частного китайского
космического стартапа&amp;rdquo; Link Space (не смотрите на меня так - я просто
перепечатываю слова из интернета):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.spaceflightinsider.com/space-flight-news/footsteps-spacex-chinese-company-eyes-development-reusable-rocket/&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2019/12/new_line_1_rocket.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;А в 2018 году, главный конструктор ракет-носителей при &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%9A%D0%B8%D1%82%D0%B0%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D0%B8%D1%81%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D0%B9_%D0%B8%D0%BD%D1%81%D1%82%D0%B8%D1%82%D1%83%D1%82_%D1%80%D0%B0%D0%BA%D0%B5%D1%82%D0%BD%D0%BE%D0%B9_%D1%82%D0%B5%D1%85%D0%BD%D0%B8%D0%BA%D0%B8&#34;&gt;Китайском
исследовательском институте ракетной техники&lt;/a&gt; Лонг Лехао рассказывал о CZ-8 -
будущем члене семейства ракет &amp;ldquo;Великий поход&amp;rdquo;. В том числе, был показан вот
такой слайд:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.spaceflightinsider.com/organizations/china-national-space-administration/china-developing-a-reusable-launch-vehicle/&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2019/12/cz-8_reusable.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Из этих двух слайдов сразу становится понятно, что любую разрабатываемую ракету
можно назвать повторно используемой. Достаточно лишь пририсовать ноги и
решетчатые рули к первой ступени. Однако принимая во внимание китайское упорство
можно довольно уверенно сказать, что рано или поздно китайцы таки научатся
приземлять и повторно использовать свои ракеты.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Когда 1.0 = 0.0</title>
      <link>https://blog.not-a-kernel-guy.com/2019/12/16/gcc/</link>
      <pubDate>Mon, 16 Dec 2019 22:49:36 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2019/12/16/gcc/</guid>
      <description>&lt;p&gt;Столкнулся недавно с новой для себя областью - ловлей багов в компиляторе.
Ловить &lt;a href=&#34;https://blog.not-a-kernel-guy.com/2010/07/11/854/&#34;&gt;баг в процессоре&lt;/a&gt; мне уже доводилось, а вот с компиляторами до
недавнего времени как-то везло.&lt;/p&gt;

&lt;p&gt;Началось все очень прозаично. В нашем репозитории есть своя реализация умного
указателя. Ну, вы знаете, как это бывает. Обычная история на самом деле&amp;hellip;
Этот класс был написан в древние времена, тогда и &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B03&#34;&gt;С++03&lt;/a&gt; еще на свете не
было. С тех пор уже и &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B17&#34;&gt;С++17&lt;/a&gt; появился и &lt;a href=&#34;https://en.wikipedia.org/wiki/C%2B%2B20&#34;&gt;С++20&lt;/a&gt; не за горами, но класс
по-прежнему активно используется. Мы его давно хотели заменить на что-нибудь
более стандартное и современное, но все руки не доходили. “Работает - не трожь”.&lt;/p&gt;

&lt;p&gt;В один прекрасный день в этом классе нашлось &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%9D%D0%B5%D0%BE%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D0%BE%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5&#34;&gt;неопределенное поведение&lt;/a&gt;, что
стало последней каплей, &lt;del&gt;переломившей верблюду соломинку&lt;/del&gt;. Указатель был
переписан на корню и стал тонкой оберткой вокруг &lt;code&gt;std::shared_ptr&amp;lt;&amp;gt;&lt;/code&gt;.
На следующий же день сломался один неприметный юнит тест на одной из платформ.
Причем на первый взгляд никакого отношения к переписанному указателю этот тест
не имел. Но от фактов было трудно отвертеться. С новым указателем тест падал, а
со старым - нет.&lt;/p&gt;

&lt;p&gt;Проблему получилось свести к коду, структура которого выглядела примерно так:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool func1(..., const double foo, ...)
{
    ...
    printf(“func1: foo == %f\n, foo);
    func2(..., foo, ...);
}
 
void func2(..., const double foo, ...)
{
    printf(“func2: foo == %f\n, foo);
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Этот код печатал следующее:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func1: foo == 1.0
func2: foo == 0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Т.е. буквально до вызова функции константа foo принимала одно значение, а в
вызываемой функции - другое.&lt;/p&gt;

&lt;p&gt;Реальный код был сложнее, конечно. Например было важно, чтобы &lt;code&gt;func1()&lt;/code&gt; была
встроена (inlined) в вызывающий код, а &lt;code&gt;func2()&lt;/code&gt; - нет. Без соблюдения этого
условия ошибка не воспроизводилась. Более того, добавление еще одного
&lt;code&gt;printf(“func1: foo == %f\n, foo);&lt;/code&gt; &lt;em&gt;после&lt;/em&gt; вызова &lt;code&gt;func2()&lt;/code&gt; также убирало
проблему. К этому моменту стало довольно очевидно, что компилятор генерирует
что-то не то.&lt;/p&gt;

&lt;p&gt;Следующим шагом стал детальный разбор ассемблерного кода, сгенерированного
компилятором. Самым сложным в этом деле оказалось найти правильный справочник
по инструкциям процессора и документ, описывающий соглашение о вызовах на
целевой платформе. Разбор показал, что константа &lt;code&gt;1.0&lt;/code&gt; правильно загружается в
регистр процессора, но далее значение переписывается другими операциями до
вызова &lt;code&gt;func2()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Поиски в баг-трекере и истории изменений в репозитории GCC не принесли успеха.
Ничего похожего на эту ошибку не находилось. Пришлось отлаживать компилятор
самостоятельно.&lt;/p&gt;

&lt;p&gt;В понимании как работает компилятор очень помогла страница &lt;a href=&#34;http://stffrdhrn.github.io/software/embedded/openrisc/2018/06/03/gcc_passes.html&#34;&gt;GCC Important
Passes&lt;/a&gt;. Если в двух словах, то логика компилятора сгруппирована по
“проходам” (passes). Проходы организованы в две группы: “tree” и “rtl”. Они
используют разные формы представления компилируемого кода: &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gccint/GIMPLE.html&#34;&gt;GIMPLE&lt;/a&gt; и
&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gccint/RTL.html&#34;&gt;Register Transfer Language (RTL)&lt;/a&gt;. Каждый проход выполняет определенное
преобразование. Например &lt;code&gt;pass_remove_useless_stmts&lt;/code&gt; удаляет явно бесполезный
код, а &lt;code&gt;pass_loop2&lt;/code&gt; выполняет оптимизацию циклов.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stffrdhrn.github.io/software/embedded/openrisc/2018/06/03/gcc_passes.html&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2019/12/gcc_passes.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Результат работы каждого прохода можно сохранить в файл указав ключи
&lt;code&gt;-fdump-rtl-all-all&lt;/code&gt; и &lt;code&gt;-fdump-tree-all-all&lt;/code&gt;. Для каждого прохода создается
отдельный файл, куда пишется весь отладочный вывод вместе с полным описанием
компилируемого модуля на языке GIMPLE или RTL.&lt;/p&gt;

&lt;p&gt;Чтобы найти проход, который приводит к ошибке, воспользовался таким алгоритмом
поиска:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Помечаем проблемный участок для того, чтобы его было легче найти. В данном
случае достаточно было сделать уникальной строку, которая передается в
&lt;code&gt;printf()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Компилируем программу с &lt;code&gt;-fdump-rtl-all-all&lt;/code&gt; и &lt;code&gt;-fdump-tree-all-all&lt;/code&gt; и
получаем несколько сотен файлов с результатами работы каждого прохода.&lt;/li&gt;
&lt;li&gt;Далее ищем проблемный проход методом половинного деления. Все выполненные
проходы пронумерованы по порядку выполнения.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Через несколько часов получаем результат - ошибка в коде появляется после
прохода &lt;code&gt;reload&lt;/code&gt;. Какую роль выполняет проход &lt;code&gt;reload&lt;/code&gt;? Для начала, согласно
&lt;a href=&#34;https://gcc.gnu.org/wiki/reload&#34;&gt;GCC wiki&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reload is the GCC equivalent of Satan.&lt;/p&gt;

&lt;p&gt;Reload - это эквивалент Сатаны в GCC.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;С чем я полностью согласен, кстати. В коде &lt;code&gt;reload&lt;/code&gt; есть условие, которое
занимает &lt;a href=&#34;https://github.com/gcc-mirror/gcc/blob/7057506456ba18f080679b2fe55ec56ee90fd81c/gcc/reload.c#L1056-L1110&#34;&gt;55 строк&lt;/a&gt;. Код &lt;code&gt;reload&lt;/code&gt; обильно припорошен макросами и
полиморфными структурами. Никогда не знаешь какой член объединения (union
member) имеет значение в данном месте. Полное ощущение, что читаешь код на
питоне. Только написанный на чистом C.&lt;/p&gt;

&lt;p&gt;Разобраться в этом месиве было бы нереально, но в таких случаях на помощь
приходит &lt;a href=&#34;https://rr-project.org/&#34;&gt;rr&lt;/a&gt;. Скажем вам нужно найти место, где создается структура с
заранее известным содержимым. Ставите условную точку останова в теле &lt;code&gt;free()&lt;/code&gt;,
которая срабатывает по известному содержимому структуры (например четыре байта
по смещению &lt;code&gt;0x88&lt;/code&gt; равны &lt;code&gt;0x12345678&lt;/code&gt;). Когда точка останова срабатывает -
проверяете что удаляется искомая структура. Теперь ставите новую условную точку
останова, которая срабатывает по записи в память по адресу, где хранится
&lt;code&gt;0x12345678&lt;/code&gt; и запускаете обратное выполнение. Бац, и отладчик остановится в
момент создания структуры (в момент записи в нее &lt;code&gt;0x12345678&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;reload&lt;/code&gt; принимает на вход код, инструкции в котором используют виртуальные
регистры, каждый из которых &lt;a href=&#34;https://en.wikipedia.org/wiki/Static_single_assignment_form&#34;&gt;загружается только один раз&lt;/a&gt;. Таких регистров
может быть тысячи и десятки тысяч. Задача &lt;code&gt;reload&lt;/code&gt; преобразовать его в код,
который использует реальные регистры процессора, число которых ограничено
несколькими десятками. Уникальные номера виртуальных регистров позволяют легко
использовать вышеописанную технику, чтобы найти структуры, соответствующие
инструкциям, выполняющим передачу константы &lt;code&gt;1.0&lt;/code&gt; в &lt;code&gt;func2()&lt;/code&gt;. А по ним, - найти
места в коде &lt;code&gt;reload&lt;/code&gt;, которые приводят в генерации некорректного кода на выходе.&lt;/p&gt;

&lt;p&gt;Результатом всех этих усилий стала заплатка для GCC, которая выдает
предупреждение компилятора, каждый раз когда &lt;code&gt;reload&lt;/code&gt; пытается сгенерировать
ошибочный код. Тем самым, у нас появился способ автоматической проверки того,
что подобный код не просочится в итоговую сборку.&lt;/p&gt;

&lt;p&gt;Умный указатель, кстати, к ошибке никакого отношения таки не имел. Просто
со старой версией генерировался другой код, который приводил к другой
последовательности использования регистров, с который проблема себя не проявляла.&lt;/p&gt;

&lt;p&gt;P.S. Сразу отвечу на очевидный вопрос. В силу специфических особенностей
отрасли, нам даже завести репорт в публичном баг-трекере без юриста никак нельзя.
Да и с юристом это еще тот геморрой.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Законы космической инженерии (Законы Акина)</title>
      <link>https://blog.not-a-kernel-guy.com/2019/11/29/akins_laws/</link>
      <pubDate>Fri, 29 Nov 2019 11:56:25 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2019/11/29/akins_laws/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aero.umd.edu/clark/faculty/3/David-Akin&#34;&gt;Давид Акин&lt;/a&gt;, директор лаборатории космических систем на факультете
аэрокосмической инженерии Мерилендского университета собрал список &lt;a href=&#34;https://spacecraft.ssl.umd.edu/akins_laws.html&#34;&gt;законов
космической инженерии&lt;/a&gt;, которые удивительно точно описывают реальность
разработки космических систем. Меня больше всего зацепил вот этот:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your best design efforts will inevitably wind up being useless in the final
design. Learn to live with the disappointment.&lt;/p&gt;

&lt;p&gt;Ваши лучшие наработки в конечном итоге окажутся не нужны. Привыкайте жить с
разочарованием.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Я как-то потратил несколько недель на оптимизацию кода, формирующего пакеты с
телеметрией, с тем чтобы укорить его в несколько раз и сэкономить 10-15% общего
времени выполнения. Что было очень важно, так как мы в очередной раз вылезли за
допустимое время выполнения. Обложил юнит тестами со всех сторон&amp;hellip; На code
review основной претензией к коду было &amp;ldquo;ну я верю, что это работает, но нельзя
ли как-нибудь попроще?&amp;rdquo; Через несколько недель я в отпуск пошел, а в том коде
нашли баг&amp;hellip; Было интересно и увлекательно.&lt;/p&gt;

&lt;p&gt;А вот недавно, я просто удалил одну проверку в двух функциях, и сэкономил те же
10-15%. Результат одинаковый, но затраченные усилия отличаются на два порядка.&lt;/p&gt;

&lt;p&gt;Ну и, само-собой, классика:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Space is a completely unforgiving environment. If you screw up the engineering,
somebody dies (and there&amp;rsquo;s no partial credit because most of the analysis was
right&amp;hellip;)&lt;/p&gt;

&lt;p&gt;Космос совершенно не прощает ошибок. Если вы ошиблись при разработке - кто-то
умрет (и вы не получите частичный зачет за то, что большая часть анализа была
верной)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Список широко цитируется в узких кругах, в том числе на Хабре публиковался
&lt;a href=&#34;https://habr.com/ru/post/354936/&#34;&gt;перевод&lt;/a&gt; (правда не на 100% точный, как мне кажется).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Нас обманывают!</title>
      <link>https://blog.not-a-kernel-guy.com/2019/04/17/truth/</link>
      <pubDate>Wed, 17 Apr 2019 20:27:31 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2019/04/17/truth/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2019/04/truth.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;P.S. Особенно доставляет то, что текст набран шрифтом Times New Roman (созданном
в Великобритании) в Microsoft Word (созданном в США) на компьютере
(разработанном в США и сделанном в Тайване), распечатан на лазерном принтере
(неизвестной родословной, но опять же - разработан в США и сделан в Азии), а
неопровержимые доказательства выложены на YouTube (созданном в США) с помощью
сети Интернет (разработанной американскими учеными на деньги военных США).
Справедливости ради замечу, что стена подъезда своя - отечественная.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Неделя удалась!</title>
      <link>https://blog.not-a-kernel-guy.com/2019/04/14/good-week/</link>
      <pubDate>Sun, 14 Apr 2019 20:44:07 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2019/04/14/good-week/</guid>
      <description>&lt;p&gt;Не могу не отметить, что прошедшая неделя выдалась на удивленье урожайной.&lt;/p&gt;

&lt;p&gt;Для начала, астрономам удалось &lt;a href=&#34;https://eventhorizontelescope.org/&#34;&gt;объединить восемь наземных телескопов в один
интерферометр размером с планету&lt;/a&gt; и сфотографировать черную дыру в ядре
галактики M87 (в радиодиапазоне):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://eventhorizontelescope.org/&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2019/04/20190410-78m-800x466.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Можно смело ожидать дальнейшего увеличения качества (и количества) подобных
снимков. Во-первых, базу интерферометра можно значительно увеличить если вывести
телескопы в космос. Успешные наблюдения слияний черных дыр на &lt;a href=&#34;https://www.ligo.caltech.edu/&#34;&gt;LIGO&lt;/a&gt;
требовали невероятно точных (до одной десятитысячной размера протона) измерений
длины плеч телескопа. Выход такой технологии в космос - это лишь вопрос времени.
Во-вторых, обрабатывать большие массивы данных и синхронизировать часы на
большом расстоянии получается с каждым годом все лучше и лучше. В-третьих,
интересных объектов помимо черных дыр в небе очень много. Особенно интересно
станет, когда научатся делать инфракрасные интерферометры с большой базой.&lt;/p&gt;

&lt;p&gt;Далее, первый коммерческий запуск Falcon Heavy прошел как по маслу. Спутник
выведен на нужную орбиту, все три ускорителя сели как положено, и даже створки
обтекателя выловили из воды в хорошем состоянии:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/TXMGu2d8c8g&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;К сожалению, первый частный лунный лендер не смог мягко прилуниться. В любом
случае этот аппарат - заметный успех частной космонавтики. До сих пор частники
до Луны еще не добирались:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.not-a-kernel-guy.com/2019/04/beresheet_last_photo.jpeg&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2019/04/beresheet_last_photo-small.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;И, наконец, вчера первый раз &lt;a href=&#34;https://www.stratolaunch.com/2019/04/13/stratolaunch-completes-historic-first-flight-of-aircraft/&#34;&gt;поднялся в воздух Stratolaunch&lt;/a&gt;:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/VFHAz4AG-no&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;Stratolaunch планируется использовать для запуска орбитальных ракет
&lt;a href=&#34;https://en.wikipedia.org/wiki/Pegasus_II_(rocket)&#34;&gt;Pegasus II&lt;/a&gt; и &lt;a href=&#34;https://en.wikipedia.org/wiki/Pegasus_(rocket)&#34;&gt;Pegasus XL&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Южная Калифорния</title>
      <link>https://blog.not-a-kernel-guy.com/2019/03/30/socal/</link>
      <pubDate>Sat, 30 Mar 2019 15:05:35 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2019/03/30/socal/</guid>
      <description>&lt;p&gt;Южную Калифорнию заливало дождями всю зиму. Ну по местным масштабам. Теперь все
холмы цветут, жужжат и кишат всякой живностью. В Walker Canyon в одни выходные
понаехало столько народу посмотреть на цветение маков, что тропу срочно закрыли.
Мы умудрились проскочить за день до закрытия:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.not-a-kernel-guy.com/2019/03/walker_canyon_poppies.jpg&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2019/03/walker_canyon_poppies-small.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;А сегодня мы ходили в Del Cerro Reserve. Таким зеленым мы его еще не видели:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.not-a-kernel-guy.com/2019/03/rattlesnake_trail.jpg&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2019/03/rattlesnake_trail-small.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>В одном бите от ядерной катастрофы</title>
      <link>https://blog.not-a-kernel-guy.com/2019/03/21/bit-flip-nuclear-disaster/</link>
      <pubDate>Thu, 21 Mar 2019 22:05:47 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2019/03/21/bit-flip-nuclear-disaster/</guid>
      <description>&lt;p&gt;А хотите я вам страшилку на ночь расскажу? На данный момент большинство всех
важных решений принимают и &lt;em&gt;выполняют&lt;/em&gt; компьютеры. Совершенно автоматически.
Не верите? Смотрите, подъезжаете вы к перекрестку на котором в этот момент
не кстати загорается красный свет. Вы плавно нажимаете на тормоз и привычно
останавливаете машину. Знакомая картина? На самом деле все происходит совсем не
так.&lt;/p&gt;

&lt;p&gt;Для начала светофором уже давно управляет автоматическая системы управления,
задача которой - равномерно рассредоточить нагрузку на дорожную сеть. И хотя
разгоняясь от предыдущего светофора вы, откровенно говоря, немного газанули
(чтобы успеть до следующего красного), систему не дураки проектировали. Время
переключения адаптируется в зависимости от времени суток и показаний датчиков,
встроенный в полотно дороги. Шансов проскочить у вас не много.&lt;/p&gt;

&lt;p&gt;Когда вы нажимаете на акселератор, перемещение педали никак не влияет на
состав горючей смеси в двигателе. Вместо этого компьютер отслеживает положение
педали и просит другой компьютер приготовить горючую смесь определенного
состава, который зависит не только от положения педали, но и от кучи других
параметров, включая приложенное усилие, дорожные условия, настройки машины,
качество топлива и т.д. Как вы думаете, что произойдет, если &lt;a href=&#34;https://en.wikipedia.org/wiki/2009%E2%80%9311_Toyota_vehicle_recalls&#34;&gt;программисты не
оттестировали как следует этот алгоритм&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Нажатие на тормоз все еще передается на колеса почти напрямую, но и этот бастион
скоро падет.&lt;/p&gt;

&lt;p&gt;Чем сложнее система, тем больше вероятность того, что человек не приминает
никаких решений напрямую. В самолетах концепция &lt;a href=&#34;https://en.wikipedia.org/wiki/Fly-by-wire&#34;&gt;fly-by-wire&lt;/a&gt; давно победила
ручное управление. Ракеты изначально &lt;a href=&#34;https://www.youtube.com/watch?v=PK_yguLapgA&#34;&gt;летают в полностью автоматическом
режиме&lt;/a&gt;. Финансовые системы практически полностью существуют в виртуальном
мире. Решения о покупке и продаже &lt;a href=&#34;https://en.wikipedia.org/wiki/2010_Flash_Crash&#34;&gt;принимаются автоматически&lt;/a&gt;. Медицинская
техника? Это только кажется, что человек нажимает кнопку и что-то при этом
решает. На самом дале нажатие кнопки всего лишь запускает глючный код, который
определяет &lt;a href=&#34;https://en.wikipedia.org/wiki/Therac-25&#34;&gt;дозу рентгена, которую получит пациент&lt;/a&gt;. Атомные станции? Ядерный
арсенал? Управляется опытными операторами? Не смешите мои тапочки. Опытные
операторы только кнопки нажимают. Компьютеры принимают все решения.&lt;/p&gt;

&lt;p&gt;Как компьютер принимает решение? А вот так:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;if (speed &amp;lt; desired_speed)
{
    accelerate();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для процессора, который выполняет этот код, принятие решение выглядит как
одна-единственная инструкция условного перехода. Если условие истинно, то
перейти по этому адресу, я если нет - то по другому. Один бит.&lt;/p&gt;

&lt;p&gt;Достаточно ошибится в одном бите, чтобы выполнить действие, прямо
противоположное действие задуманному. Разница между &amp;ldquo;отдать штурвал от себя&amp;rdquo; и
&amp;ldquo;потянуть штурвал на себя&amp;rdquo; - один бит.&lt;/p&gt;

&lt;p&gt;Страшно?&lt;/p&gt;

&lt;p&gt;Дойдут руки - напишу почему это не совсем так. :-)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Боинг 737 MAX</title>
      <link>https://blog.not-a-kernel-guy.com/2019/03/18/boeing-737-max/</link>
      <pubDate>Mon, 18 Mar 2019 21:45:12 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2019/03/18/boeing-737-max/</guid>
      <description>&lt;p&gt;История с двумя авиакатастрофами самолетов Боинг 737 MAX 8 принимает интересный
оборот. Эта модель самолета начала летать в мае 2017 года. 29 октября 2018
вскоре после взлета разбивается &lt;a href=&#34;https://en.wikipedia.org/wiki/Lion_Air_Flight_610&#34;&gt;рейс 610 авиакомпании Lion Air&lt;/a&gt;. Далее,
10 марта 2019 года вскоре после взлета падает &lt;a href=&#34;https://en.wikipedia.org/wiki/Ethiopian_Airlines_Flight_302&#34;&gt;рейс 302 Эфиопских авиалиний&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Одинаковый характер обоих авиакатастроф ставит под подозрение систему MCAS
(Maneuvering Characteristics Augmentation System) - новую систему разработанную
специально для 737 MAX. Задача этой системы - избежать сваливания в ситуации,
когда угол атаки превышает определенный порог. MCAS автоматически отклоняет
горизонтальный стабилизатор, опуская нос самолета и уменьшая угол атаки.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2019/03/MCAS-MAX-737-sensor-W.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Предполагается, что сбой в работе MCAS привел к отклонению стабилизатора на
максимально возможный угол, что в результате и привело к падению.&lt;/p&gt;

&lt;p&gt;Теперь &lt;a href=&#34;https://www.seattletimes.com/business/boeing-aerospace/failed-certification-faa-missed-safety-issues-in-the-737-max-system-implicated-in-the-lion-air-crash/&#34;&gt;выясняются&lt;/a&gt; интересные &lt;a href=&#34;https://twitter.com/trevorsumner/status/1106934369158078470&#34;&gt;подробности&lt;/a&gt;. Во первых MCAS - это костыль
который позволил Боингу сертифицировать 737 MAX не как совершенно новую модель
самолета, а как модификацию существующей модели. 737 MAX оборудован новыми,
большими по размеру двигателями, чем другие 373. Чтобы разместить новые
двигатели под крыльями (без переделки фюзеляжа), их выдвинули вверх и вперед.
Это в свою очередь изменило летные характеристики самолета и инженеры Боинга
разработали MCAS, чтобы компенсировать разницу.&lt;/p&gt;

&lt;p&gt;Почему нельзя было переделать фюзеляж? Можно было бы, но это был бы новый
самолет, с более сложной программой сертификации. Учитывая, что 737 MAX нужен
был для конкуренции с &lt;a href=&#34;https://en.wikipedia.org/wiki/Airbus_A320neo_family&#34;&gt;A320neo&lt;/a&gt;, то времени на разработку и сертификацию
нового самолета не было (классика).&lt;/p&gt;

&lt;p&gt;В принципе в идее MCAS нет ничего особенно плохого. Однако в данном случае по
всей видимости произошло то, что называется &amp;ldquo;process miss&amp;rdquo; - а именно цепочка
событий привела в двум катастрофам, причем каждое их этих событий само по себе
к катастрофе бы не привело.&lt;/p&gt;

&lt;p&gt;Например, дизайн MCAS предполагает, что эта система может отклонять
горизонтальный стабилизатор не более чем на определенный угол. Однако с моменту
принятия самолета в эксплуатацию этот угол вырос в четыре раза. Летные испытания
показали, что изначально заложенный не обеспечивает достаточного
противодействия кабрирующему моменту.&lt;/p&gt;

&lt;p&gt;MCAS использует один (!) датчик угла атаки, который по всей видимости не
достаточно надежен. На обоих самолетах были отмечены проблемы с этими датчиком.
Боинг предлагает опцию (!), включающую установку второго сенсора и индикатора
разногласий между датчиками. Оба самолета не были оборудованы этой опцией.&lt;/p&gt;

&lt;p&gt;Далее, многие пилоты отметили неадекватное обучение при переходе на 737 MAX с
737. Боинг рекламировал самолет как обыкновенный 737-й, ничем значительным не
отличающимся от &amp;ldquo;обычных&amp;rdquo; 737-х. Это похоже на явный неумышленный просчет. Я
могу легко себе представить, что система &amp;ldquo;заставляющая 737 MAX вести себя как
737&amp;rdquo; могла проскочить, как не стоящая пристального внимания и переучивания
пилотов.&lt;/p&gt;

&lt;p&gt;Я уверен в этой цепочке еще с десяток разный событий. По настоящему мне странно
только использование только одного датчика. Особенно для системы, которая
срабатывает автоматически. По хорошему их должно быть три. Тогда выход из строя
одного из датчиков не проблема. Два - немного хуже чем три. С двумя датчиками
нельзя распознать некоторые сбои. Но один?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Скрытые угрозы</title>
      <link>https://blog.not-a-kernel-guy.com/2019/03/07/hidden-menace/</link>
      <pubDate>Thu, 07 Mar 2019 21:35:43 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2019/03/07/hidden-menace/</guid>
      <description>&lt;p&gt;Ой, други мои! Ржу, не могу остановится. Текут слезы и болят бока. Набрел на
шедевр махровой пропаганды, или как говорят в теперешней России, - вторник.
Смотрите сами, а главное, - до самого конца:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/2_WHa_92z-s&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;В 1984 Уинстон Смит описывает двухминутки ненависти как действо, в котором
невозможно было не принять участие. После 30 секунд любой человек превращался
в беснующегося фанатика. Тем не менее, эта ярость для главного героя книги
оставалась абстрактной, ненаправленной эмоцией.&lt;/p&gt;

&lt;p&gt;Не реалистично.&lt;/p&gt;

&lt;p&gt;Знаете как выглядят настоящие двухминутки ненависти? Это когда посмотрят такой
вот продукт и говорят &amp;ldquo;пропаганда и вранье, конечно, но вот одну вещь они
правильно заметили&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Со стороны, кстати, очень бросаются в глаза уши пост-советского мышления. Где-то
в середине видео упоминается бюджет НАСА и многозначительно добавляется &amp;ldquo;это,
мол, только официальная часть&amp;rdquo;. Я прямо в этом месте и заржал, извините за мой
французский. Вообще мне трудно представить себе более идеалистическую и открытую
организацию, чем НАСА. Но я могу себе легко представить, как мысль &amp;ldquo;обязательно
должна быть хотя бы серая касса&amp;rdquo; кажется нормальной и привычной.&lt;/p&gt;

&lt;p&gt;И ладно бы, если бы можно было все списать на то, что, мол, это все пропаганда,
можно сказать - законы жанра. Но все гораздо хуже. Смотрите. Сначала Маск
говорит &amp;ldquo;Чуваки, Раптор показал давление в камере выше, чем предыдущий
рекордсмен РД-180&amp;rdquo;:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Raptor reached 268.9 bar today, exceeding prior record held by the awesome Russian RD-180. Great work by &lt;a href=&#34;https://twitter.com/SpaceX?ref_src=twsrc%5Etfw&#34;&gt;@SpaceX&lt;/a&gt; engine/test team! &lt;a href=&#34;https://t.co/yPrvO0JhyY&#34;&gt;pic.twitter.com/yPrvO0JhyY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Elon Musk (@elonmusk) &lt;a href=&#34;https://twitter.com/elonmusk/status/1094782854007910400?ref_src=twsrc%5Etfw&#34;&gt;February 11, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;На что в Энергомаше &lt;a href=&#34;https://www.interfax.ru/russia/650111&#34;&gt;обиделись как дети малые и &amp;ldquo;поприветствовали первые успехи
коллег из компании SpaсeX в области ракетного двигателестроения&amp;rdquo;&lt;/a&gt;. Потом Илон
запускает Crew Dragon (читай - уводит рынок извоза астронавтов прямо из под
носа). В ответ Роскосмос пишет едкий твит:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ru&#34; dir=&#34;ltr&#34;&gt;Роскосмос поздравляет &lt;a href=&#34;https://twitter.com/NASA?ref_src=twsrc%5Etfw&#34;&gt;@NASA&lt;/a&gt; с успешной стыковкой нового корабля и подчеркивает, что безопасность полетов должна быть безукоризненной. &lt;br&gt;&lt;br&gt;Госкорпорация приветствует развитие взаимоотношений в области освоения космоса и выражает уверенность, что сотрудничество будет развиваться &lt;a href=&#34;https://t.co/xI6dHWXKUF&#34;&gt;pic.twitter.com/xI6dHWXKUF&lt;/a&gt;&lt;/p&gt;&amp;mdash; РОСКОСМОС (@roscosmos) &lt;a href=&#34;https://twitter.com/roscosmos/status/1102174742537224192?ref_src=twsrc%5Etfw&#34;&gt;March 3, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;И вот после это кардебалета Илон хвалит российских ракетчиков:&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Russia has excellent rocket engineering &amp;amp; best engine currently flying. Reusable version of their new Angara rocket would be great. &lt;a href=&#34;https://t.co/6RLvf5R4ni&#34;&gt;https://t.co/6RLvf5R4ni&lt;/a&gt;&lt;/p&gt;&amp;mdash; Elon Musk (@elonmusk) &lt;a href=&#34;https://twitter.com/elonmusk/status/1103729668987842560?ref_src=twsrc%5Etfw&#34;&gt;March 7, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;&amp;ldquo;Да он издевается&amp;rdquo;, - подумали дядьки из Роскосмоса.&lt;/p&gt;

&lt;p&gt;Я так понимаю, что списать все на пропаганду не получится. Надо консерваторию
под снос отправлять.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Водоплавающая ступень</title>
      <link>https://blog.not-a-kernel-guy.com/2018/12/05/crs16/</link>
      <pubDate>Wed, 05 Dec 2018 20:46:18 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2018/12/05/crs16/</guid>
      <description>&lt;p&gt;Такой интересной трансляции запуска давно не было. Все шло по плану, пока не
полетел гидравлический привод аэродинамических рулей:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Engines stabilized rocket spin just in time, enabling an intact landing in water! Ships en route to rescue Falcon. &lt;a href=&#34;https://t.co/O3h8eCgGJ7&#34;&gt;pic.twitter.com/O3h8eCgGJ7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Elon Musk (@elonmusk) &lt;a href=&#34;https://twitter.com/elonmusk/status/1070399755526656000?ref_src=twsrc%5Etfw&#34;&gt;December 5, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;С первых моментов закрутки стало ясно, что дело пахнет керосином. Зрители сразу
заметно оживились. Первая оформившаяся мысль была: &amp;ldquo;Ух ты! Смотри как она
может&amp;rdquo;. Следующая за ней: &amp;ldquo;Интересно, когда рванет?&amp;rdquo; При посадке ступень сначала
целится в океан - мимо посадочной площадки. Как раз на случай если, что пойдет
не так. Так что особых переживаний, что она кому-то на голову упадет не было.
Просто было интересно чем все закончится.&lt;/p&gt;

&lt;p&gt;Закончилось все не так, как можно было бы ожидать. Ступень погасила скорость,
выпустила ноги, и мягко приводнилась. Что самое интересное, степень не
взорвалась когда ожидаемо завалилась на бок. Более того, изображение не пропало
до самого конца - что означает, что передатчик и авионика продолжала работать
как ни в чем не бывало.&lt;/p&gt;

&lt;p&gt;Еще одно видео:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;et&#34; dir=&#34;ltr&#34;&gt;Ouch!&lt;br&gt;Source Dasvaldez on twitch&lt;br&gt;&lt;br&gt;cc &lt;a href=&#34;https://twitter.com/SpaceX?ref_src=twsrc%5Etfw&#34;&gt;@SpaceX&lt;/a&gt; &lt;a href=&#34;https://twitter.com/disinformatico?ref_src=twsrc%5Etfw&#34;&gt;@disinformatico&lt;/a&gt; &lt;a href=&#34;https://twitter.com/NASASpaceflight?ref_src=twsrc%5Etfw&#34;&gt;@NASASpaceflight&lt;/a&gt; &lt;a href=&#34;https://twitter.com/NASA?ref_src=twsrc%5Etfw&#34;&gt;@NASA&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Space_Station?ref_src=twsrc%5Etfw&#34;&gt;@Space_Station&lt;/a&gt; &lt;a href=&#34;https://t.co/yfdbQ47puU&#34;&gt;pic.twitter.com/yfdbQ47puU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Riccardo Rossi (@RikyUnreal) &lt;a href=&#34;https://twitter.com/RikyUnreal/status/1070388054949588992?ref_src=twsrc%5Etfw&#34;&gt;December 5, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;P.S. Dragon без приключений вышел на запланированную орбиту.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Как выглядит запуск с орбиты</title>
      <link>https://blog.not-a-kernel-guy.com/2018/11/23/progress-iss/</link>
      <pubDate>Fri, 23 Nov 2018 22:07:21 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2018/11/23/progress-iss/</guid>
      <description>&lt;p&gt;Впечатляющее видео - покадровая съемка, показывающая как выглядел запуск
Прогресса MC-10 с борта МКС:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/aJy1u-N3NY0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Волшебство Питона</title>
      <link>https://blog.not-a-kernel-guy.com/2018/11/20/python-magic/</link>
      <pubDate>Tue, 20 Nov 2018 22:36:35 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2018/11/20/python-magic/</guid>
      <description>&lt;p&gt;Мне все-таки не понятно как живут большие проекты, написанные на Питоне. Он же
как песок. Пока проект небольшой - все классно. Быстро накидали горку мокрого
песка, лопаткой обхлопали для придания формы и все дела. Знай только что брызгай
водой своевременно. Когда проект разрастается, то красивый и уютный песчанный
замок превращается в минное поле. Отрефакторил подвал - крыша отвалилась.
Поправил крышу - окна слиплись в один комок.&lt;/p&gt;

&lt;p&gt;Непонятно как все это счастье держать в одной куче. Неужели все живут за счет
100% покрытия тестами? Не верю. Или все на PyCharm сидят?&lt;/p&gt;

&lt;p&gt;Расскажу про очередной прикол Питона. Итак есть простой код:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def init(factories):
    &amp;quot;&amp;quot;&amp;quot;Convert a list of factorie into a list of objects.&amp;quot;&amp;quot;&amp;quot; 
    return [factory() for factory in factories]

def cleanup(objects):
    &amp;quot;&amp;quot;&amp;quot;Clean up objects in the reversed order of their creation.&amp;quot;&amp;quot;&amp;quot;
    for obj in reversed(objects):
        obj.cleanup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;init()&lt;/code&gt; берет список фабрик и отдает список объектов, созданных фабриками.
&lt;code&gt;cleanup()&lt;/code&gt; чистит созданные объекты в порядке, противоположном порядку
создания. Нам требуется написать тест, который проверяет, что методы &lt;code&gt;cleanup()&lt;/code&gt;
вызываются в правильном порядке:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from itertools import permutations
import mock

def test_cleanup():
    &amp;quot;&amp;quot;&amp;quot;Verify cleanup() order.&amp;quot;&amp;quot;&amp;quot;
    # Try all permitations of initialization order. 
    for init_order in permutations(range(3)):
        cleanup_order = []

        def factory(index):
            def cleanup():
                &amp;quot;&amp;quot;&amp;quot;Record the clean up order.&amp;quot;&amp;quot;&amp;quot;
                cleanup_order.append(index)

            def create():
                &amp;quot;&amp;quot;&amp;quot;Return a mock implementing cleanup().&amp;quot;&amp;quot;&amp;quot;
                obj = mock.Mock
                obj.cleanup = mock.Mock(side_effect=cleanup)
                return obj

            return create

        # Create objects in the desired order.
        objects = init([factory(index) for index in init_order])

        cleanup(objects)

        # Verify that the object were cleaned up in the reveresed
        # order of their creation.
        assert cleanup_order == list(reversed(init_order))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Разберу логику по кускам. Тест перебирает все возможные кобинации порядка
создания объектов:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for init_order in permutations(range(3)):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Декоратор &lt;code&gt;factory()&lt;/code&gt; возвращает фабрику &lt;code&gt;create()&lt;/code&gt;, которая в свою учередь
создает объект с методом &lt;code&gt;cleanup()&lt;/code&gt;. Для создания объекта на коленке
используется &lt;a href=&#34;https://docs.python.org/3/library/unittest.mock.html&#34;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt;. Релизация &lt;code&gt;cleanup()&lt;/code&gt; запоминает порядок вызова в
&lt;code&gt;cleanup_order&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;init()&lt;/code&gt; создает объекты в заданном порядке, &lt;code&gt;cleanup()&lt;/code&gt; - чистит:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;objects = init([factory(index) for index in init_order])

cleanup(objects)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Наконец, в самом конце мы проверяем, что порядок очистки противоположен порядку
создания:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;assert cleanup_order == list(reversed(init_order))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Все просто, не так ли? Запускаем тест и получаем облом:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;               assert cleanup_order == list(reversed(init_order))
E     assert [2, 2, 2] == [2, 1, 0]
E       At index 1 diff: 2 != 1
E       Use -v to get the full diff


rabbit_test.py:41: AssertionError 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Заядлые питонщики давно раскусили, в чем проблема. А вы сможете найти ошибку не
заглядывая в ответ?&lt;/p&gt;

&lt;p&gt;Проблема вот в этой строке:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;obj = mock.Mock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Здесь &lt;code&gt;obj&lt;/code&gt; - это не объект класса &lt;code&gt;mock.Mock&lt;/code&gt;, сам класс &lt;code&gt;mock.Mock&lt;/code&gt;.
Соответсвенно следующая строка не добавляет метод &lt;code&gt;cleanup()&lt;/code&gt; к объекту, а
изменяет метод &lt;code&gt;cleanup()&lt;/code&gt; для всех объектов класса &lt;code&gt;mock.Mock&lt;/code&gt;. В результате
с моменту вызова &lt;code&gt;cleanup()&lt;/code&gt;, последняя версия с индексом 2 вызывается для всех
объектов. Если добавить скобки, то все работает как часы:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;obj = mock.Mock()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Как в таких невыносимых условиях программировать?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>