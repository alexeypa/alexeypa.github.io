<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Инструменты on Алексей Пахунов</title>
    <link>https://blog.not-a-kernel-guy.com/tags/%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B/</link>
    <description>Recent content in Инструменты on Алексей Пахунов</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Fri, 22 Sep 2017 20:08:39 -0700</lastBuildDate><atom:link href="https://blog.not-a-kernel-guy.com/tags/%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git merge vs git rebase</title>
      <link>https://blog.not-a-kernel-guy.com/2017/09/22/git-merge-rebase/</link>
      <pubDate>Fri, 22 Sep 2017 20:08:39 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2017/09/22/git-merge-rebase/</guid>
      <description>&lt;p&gt;Прелесть какая:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pbs.twimg.com/media/DJ9dW0BW4AEwGOW.jpg:large&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2017/09/git-merge-rebase.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sublime Text 3</title>
      <link>https://blog.not-a-kernel-guy.com/2017/09/17/sublime-text-3/</link>
      <pubDate>Sun, 17 Sep 2017 22:01:02 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2017/09/17/sublime-text-3/</guid>
      <description>&lt;p&gt;Вышел &lt;a href=&#34;https://www.sublimetext.com/blog/articles/sublime-text-3-point-0&#34;&gt;Sublime Text 3&lt;/a&gt; и у меня
наконец дошли руки его попробовать. Страница с анонсом упирает на
производительность - по моим первым ощущениям похоже на правду. Завтра поставлю
на работе, посмотрим как он запоет. Новая тема приятна на глаз; шрифты
отрисовываются на отлично. Радует также, что у кнопки Replace на панели Find in
Files появилась горячая комбинация клавиш. Раньше приходилось мышью щелкать.
В общем пока что впечатления самые приятные. Старого не испортили; приятного -
добавили.&lt;/p&gt;
&lt;p&gt;По случаю ковыряния в настройках довел до ума &lt;a href=&#34;https://github.com/nvbn/thefuck&#34;&gt;thefuck&lt;/a&gt; под zsh. Эта утилита, название которой на
русский вполне точно можно перевести как &amp;ldquo;бля&amp;rdquo;, исправляет неправильную
набранную команду в консоли. Забытый &lt;code&gt;sudo&lt;/code&gt; подставляет или &lt;code&gt;git statis&lt;/code&gt;
исправляет на &lt;code&gt;git status&lt;/code&gt; - стоит только ввести &lt;code&gt;fuck&lt;/code&gt; в ответ на ошибочную
команду. У меня она почему-то выдавала сообщения вида &amp;ldquo;fc: event not found: -c&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rr</title>
      <link>https://blog.not-a-kernel-guy.com/2017/05/07/rr/</link>
      <pubDate>Sun, 07 May 2017 18:56:38 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2017/05/07/rr/</guid>
      <description>&lt;p&gt;Недавно наткнулся на &lt;a href=&#34;http://rr-project.org/&#34;&gt;rr (Record and Replay Framework)&lt;/a&gt;
от Mozilla и я вам скажу, что это просто незаменимый инструмент для ловли
неуловимых багов в отладчике. Это не первый и не единственный инструмент
подобного плана. &lt;a href=&#34;https://github.com/mozilla/rr/wiki/Related-work&#34;&gt;Соответствующая страница проекта&lt;/a&gt;
описывает десятка три альтернатив. Из этого списка мне раньше доводилось
работать только с iDNA, который впоследствии стал &lt;a href=&#34;http://www.thewindowsclub.com/microsoft-time-travel-tracing-diagnostic&#34;&gt;Time Travel Tracing
&lt;/a&gt; (TTT).
TTT мог записать процесс выполнения программы с точностью до инструкции и
воспроизвести его в точности в прямом и обратном направлении. TTT был просто
незаменим для ловли сложных багов и его главным недостатком было то, что TTT был
внутренним инструментом, который Microsoft так и не выпустила как отдельный
продукт.&lt;/p&gt;
&lt;p&gt;rr тоже может записать выполнение процесса с точностью до инструкции и проиграть
его назад и вперед. rr требует современного процессора, причем обязательно
Intel, так как использует performance counters которые не реализованы в других
процессорах. ARM и другие архитектуры тоже не поддерживаются. В обмен на это,
rr практически не замедляет записываемый процесс. Скорость выполнения падает в
1.2 раза - сущие пустяки. Размер генерируемой записи тоже крайне скромен - в
районе гигабайта за 10-15 минут выполнения “вычислительного” кода. Практически
бесплатно. В пересчете на количество выполненных инструкций получается что-то
вроде 0.1 бита на выполненную инструкцию.&lt;/p&gt;
&lt;p&gt;Что интересно, rr базируется на очень простой идее: большая часть кода
выполняется всегда одинаково. Если записать все случайные события (ввод/вывод,
RDTSC, системный вызовы) и начальные условия (содержимое памяти), то процесс
выполнения становится полностью детерминированным. Более детально можно почитать
здесь: &lt;a href=&#34;http://rr-project.org/rr.html&#34;&gt;http://rr-project.org/rr.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Процесс отладки с помощью rr выглядит так:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Записываем процесс: &lt;code&gt;rr record &amp;lt;program&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Запускаем запись в отладчике: &lt;code&gt;rr replay&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Проматываем до конца и смотрим чем вызван segfault.&lt;/li&gt;
&lt;li&gt;Ставим watchpoint на память из которой читается плохой указатель.&lt;/li&gt;
&lt;li&gt;Выполняем программу назад пока не сработает watchpoint.&lt;/li&gt;
&lt;li&gt;Смотрим почему в память пишется плохой указатель и повторяем шаги 4-6 до
победного конца.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Дополнительный бонус заключается в том, что все адреса при повторном
воспроизведении сохраняются. Если нужная переменная находится по адресу
&lt;code&gt;0x123fooba&lt;/code&gt;, то она там будет всегда. Отпадает необходимость выяснять где в
памяти находится интересный кусок каждый раз при запуске отладчика. rr также
может помечать вывод в stdout метками для быстрой перемотки в нужное место.
Это помогает сопоставить код с интересными местами в лог файлах.&lt;/p&gt;
&lt;p&gt;Само собой, у rr есть куча других ограничений. К примеру, он не работает под
Windows, не поддерживаются все системные вызовы, не поддерживается циклическая
запись (последние несколько минут выполнения процесса), поддерживается только
одно процессорное ядро, и т.д. Тем не менее, если вы столкнулись с “невозможным”
багом в Linux, rr - один из наиболее вероятных способов докопаться до источника
проблемы.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Трассировка описателей (AKA handle tracing)</title>
      <link>https://blog.not-a-kernel-guy.com/2012/12/04/1437/</link>
      <pubDate>Tue, 04 Dec 2012 23:23:13 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2012/12/04/1437/</guid>
      <description>&lt;p&gt;Начиная с Windows XP в ядро встроена поддержка трассировки описателей ядра (AKA handle tracing). Включение трассировки имеет двойной эффект. Во-первых, все операции с ядерными описателями сохраняются в циклический буфер (откуда их можно потом прочитать). Во-вторых, при любой попытке использовать несуществующий описатель генерируется исключение STATUS_INVALID_HANDLE. Фактически, проверка корректности операций с описателями в &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/dd371695(v=vs.85).aspx&#34;&gt;Application Verifier&lt;/a&gt; - это тонкая обертка вокруг функций трассировки, предоставляемых ядром. Расширение отладчика !htrace - аналогично.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Битва титанов: Visual Studio 2010 против Sophos Antivirus</title>
      <link>https://blog.not-a-kernel-guy.com/2012/05/04/1317/</link>
      <pubDate>Fri, 04 May 2012 10:50:56 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2012/05/04/1317/</guid>
      <description>&lt;p&gt;По рассылке пришло описание бага ну просто феерической кавайности: &lt;a href=&#34;http://connect.microsoft.com/VisualStudio/feedback/details/649139/vs2010-does-complete-rebuild-based-on-completely-unrelated-file&#34;&gt;http://connect.microsoft.com/VisualStudio/feedback/details/649139/vs2010-does-complete-rebuild-based-on-completely-unrelated-file&lt;/a&gt;. Если вкраце, то присутсвие Sophos Antivirus на машине, заставляет Visual Studio делать полный билд вместо инкрементального. Почему? Потому что MSBuild полагает, что файл “%ProgramData%\Sophos\Sophos Anti-Virus\config\Config.bops” (который, понятно, ни к MSBuild, ни к собираемому проекту никак не относится) является вводом каждого target’а в проекте. По какой-то причине, этот файл обновляется очень часто, что и вызывает полную пересборку всего проекта. WTF?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.not-a-kernel-guy.com/2012/05/house_wtf.jpg&#34;&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2012/05/house_wtf.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>… и концы в воду</title>
      <link>https://blog.not-a-kernel-guy.com/2008/06/25/315/</link>
      <pubDate>Wed, 25 Jun 2008 23:45:54 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2008/06/25/315/</guid>
      <description>&lt;p&gt;Эта неделя началась замечательно, - а именно с безуспешных попыток выяснить, почему валиться билд. Надо сказать, что и в невоенное-то время разобраться, что именно поломалось бывает непросто. Но в этот раз все было еще веселее чем обычно. Некая утилита (не будем показывать пальцем, хотя утилита написана на .NET :-) ), выдавала примерно следующий лог:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-no-highlight&#34; data-lang=&#34;no-highlight&#34;&gt;...
&amp;gt; FooBar: parsing Z:\temp\tmp1234.tmp
&amp;gt; FooBar: error XXXX, line 123, Z:\temp\tmp1234.tmp
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Ценителям логичности и простоты cmd.exe посвящается…</title>
      <link>https://blog.not-a-kernel-guy.com/2008/06/15/313/</link>
      <pubDate>Sun, 15 Jun 2008 17:26:36 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2008/06/15/313/</guid>
      <description>Хорошая статья: Особенности реализации командного процессора cmd.exe операционных систем WinNT. Напрочь отбивает всякое желание связываться с написанием скриптов для cmd.exe. :-)</description>
    </item>
    
    <item>
      <title>Process Monitor научился трассировать 32-х битный стек на x64</title>
      <link>https://blog.not-a-kernel-guy.com/2008/03/23/299/</link>
      <pubDate>Sun, 23 Mar 2008 22:46:19 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2008/03/23/299/</guid>
      <description>&lt;p&gt;Я как-то привык, что Process Monitor не умеет показывать 32-х битный стек события, которое произошло в 32-х разрядном процессе, выполняющемся под Wow64. Вместо этого он показывал только 64-х битный стек, что было абсолютно бесполезно, так как там по определению всегда светится wow64.dll сотоварищи. Однако после подсказки на &lt;a href=&#34;http://forum.sysinternals.com/forum_posts.asp?TID=13227#65748&#34;&gt;Sysinternals Forums&lt;/a&gt; выяснилось, что начиная с Vista SP1 это уже работает.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Как Process Explorer подменяет Task Manager</title>
      <link>https://blog.not-a-kernel-guy.com/2008/03/13/297/</link>
      <pubDate>Thu, 13 Mar 2008 21:41:33 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2008/03/13/297/</guid>
      <description>&lt;p&gt;А знаете, как &lt;a href=&#34;http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx&#34;&gt;Process Explorer&lt;/a&gt; подменяет собой стандартный Task Manager?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2008/03/procexp_1.png&#34; alt=&#34;Process Explorer: Replace Task Manager.&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>5 инструментов</title>
      <link>https://blog.not-a-kernel-guy.com/2008/03/01/294/</link>
      <pubDate>Sat, 01 Mar 2008 23:34:19 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2008/03/01/294/</guid>
      <description>&lt;p&gt;Моя очередь рассказывать про 5 инструментов, без которых я не могу работать продуктивно. Эстафетную палочку мне передали сразу двое участников: сначала &lt;a href=&#34;http://alenacpp.blogspot.com/2008/02/5.html&#34;&gt;Елена Сагалаева&lt;/a&gt;, затем &lt;a href=&#34;http://stump-workshop.blogspot.com/2008/02/5.html&#34;&gt;Сергей Розовик&lt;/a&gt;. Получается, что у меня теперь ДВЕ эстафетные палочки. :-) Придется отработать вдвойне.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.microsoft.com/whdc/devtools/debugging/default.mspx&#34;&gt;Debugging Tools for Windows&lt;/a&gt;: windbg.exe, cdb.exe, kd.exe, remote.exe, gflags.exe и так далее. Несмотря на то, что интерфейс WinDbg ужасен, а все остальные утилиты работают только в командной строке, нет лучшего отладчика &lt;em&gt;для&lt;/em&gt; Windows.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Разрядность .NET сборок</title>
      <link>https://blog.not-a-kernel-guy.com/2007/12/18/272/</link>
      <pubDate>Tue, 18 Dec 2007 23:33:41 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/12/18/272/</guid>
      <description>&lt;p&gt;Вскоре после написания &lt;a href=&#34;https://blog.not-a-kernel-guy.com/2007/10/24/258/&#34;&gt;поста про определение разрядности исполняемых файлов&lt;/a&gt; выяснилось, что в мире .NET «всё совсем по-другому».&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Far Manager открывает исходный код</title>
      <link>https://blog.not-a-kernel-guy.com/2007/10/26/259/</link>
      <pubDate>Fri, 26 Oct 2007 21:52:06 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/10/26/259/</guid>
      <description>Все уже в курсе, как я понимаю&amp;hellip;</description>
    </item>
    
    <item>
      <title>Как определить разрядность .EXE или .DLL?</title>
      <link>https://blog.not-a-kernel-guy.com/2007/10/24/258/</link>
      <pubDate>Wed, 24 Oct 2007 22:21:07 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/10/24/258/</guid>
      <description>&lt;p&gt;Как определить тип процессора для которого скомпилирован бинарный файл? Можно воспользоваться сборщиком из поставки Visual Studio 2005:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-no-highlight&#34; data-lang=&#34;no-highlight&#34;&gt;link.exe /dump /headers &amp;lt;.exe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://blog.not-a-kernel-guy.com/2007/10/dumpbin01.png&#34; alt=&#34;link.exe /dump /headers&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Типичные проблемы, возникающие при работе с WinDbg, и их решения</title>
      <link>https://blog.not-a-kernel-guy.com/2007/09/24/243/</link>
      <pubDate>Mon, 24 Sep 2007 21:04:28 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/09/24/243/</guid>
      <description>Хорошая статья про типичные проблемы WinDbg на английском: Common WinDbg problems and solutions.</description>
    </item>
    
    <item>
      <title>Как собрать DParser for Python с помощью Visual C&#43;&#43; 2005?</title>
      <link>https://blog.not-a-kernel-guy.com/2007/08/28/231/</link>
      <pubDate>Tue, 28 Aug 2007 23:24:31 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/08/28/231/</guid>
      <description>&lt;p&gt;Существует два способа собрать DParser for Python под Windows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Легкий – воспользоваться GCC из MinGW и немного пошаманить;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Интересный – попытаться сделать тоже самое с помощью Visual C++ 2005.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Естественно, что я выбрал второй вариант. :-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(На самом деле причина довольно прозаична – не хотелось собирать один проект двумя разными компиляторами).&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Как запустить C препроцессор в Boost.Build V2. Часть последняя</title>
      <link>https://blog.not-a-kernel-guy.com/2007/06/25/202/</link>
      <pubDate>Mon, 25 Jun 2007 22:52:09 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/06/25/202/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.not-a-kernel-guy.com/2007/06/11/197/&#34;&gt;В таком виде генератор уже пригоден к использованию, однако его можно сделать ещё лучше. Как - читайте в следующей части.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Если сравнить исходный код нашего генератора с реализацией генератора объектных файлов в “boost/tools/build/v2/tools/msvc.jam” можно обнаружить несколько отличий:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Viva64: статический анализатор кода, специализирующийся на проблемах 64-х битного кода</title>
      <link>https://blog.not-a-kernel-guy.com/2007/06/19/200/</link>
      <pubDate>Tue, 19 Jun 2007 00:21:48 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/06/19/200/</guid>
      <description>&lt;p&gt;Некоторое время назад (довольно давно, откровенно говоря) меня попросили написать про &lt;a href=&#34;http://www.viva64.com&#34;&gt;Viva64&lt;/a&gt;, но я это дело как-то проволынил. Просто написать, что «есть такая штука, а дальше разбирайтесь сами» не хотелось, а руки до поставить и попробовать не доходили. Теперь, как вы понимаете, дошли, - теперь можно делиться впечатлениями.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Как запустить C препроцессор в Boost.Build V2. Часть II</title>
      <link>https://blog.not-a-kernel-guy.com/2007/06/11/197/</link>
      <pubDate>Mon, 11 Jun 2007 23:49:12 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/06/11/197/</guid>
      <description>&lt;p&gt;Продолжаем &lt;a href=&#34;https://blog.not-a-kernel-guy.com/2007/06/06/194/&#34;&gt;начатое ранее&lt;/a&gt;. Мы остановились на том, что сумели вызвать компилятор и передать ему нужную команду. Теперь нам нужно научиться передавать все настройки компилятора, уже известные Boost.Build, в созданную командную строку. Для сначала нужно выяснить как же, собственно, Boost.Build узнает где находится компилятор и как задаются параметры компиляции.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Как запустить C препроцессор в Boost.Build V2</title>
      <link>https://blog.not-a-kernel-guy.com/2007/06/06/194/</link>
      <pubDate>Wed, 06 Jun 2007 21:31:22 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/06/06/194/</guid>
      <description>&lt;p&gt;Библиотеки &lt;a href=&#34;http://www.boost.org&#34;&gt;Boost&lt;/a&gt; не использует make файлы или какую-либо другую более менее стандартную систему компиляции. Вместо этого Boost использует собственную систему сборки - &lt;a href=&#34;http://www.boost.org/tools/build/v2/index.html&#34;&gt;Boost.Build V2&lt;/a&gt;. Система построена вокруг Boost.Jam, который, в свою очередь, является наследником Perforce Jam, - интерпретатора скриптов Jam. Вокруг возможностей Boost.Jam, который, между прочем, состоит из единственного исполняемого файла, навёрнута система скриптов изолирующая разработчика от особенностей конкретного компилятора и платформы.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Шпаргалка по синтаксису командной строки</title>
      <link>https://blog.not-a-kernel-guy.com/2007/03/01/155/</link>
      <pubDate>Thu, 01 Mar 2007 11:40:39 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/03/01/155/</guid>
      <description>Шпаргалка по синтаксису командной строки (cmd.exe) - http://www.ss64.com/ntsyntax/. Must have если вы пишите нетривиальные скрипты.
Там же есть аналогичные шпаргалки для bash, Oracle 9i и MS SQL 2005.</description>
    </item>
    
    <item>
      <title>Trac</title>
      <link>https://blog.not-a-kernel-guy.com/2007/02/22/152/</link>
      <pubDate>Thu, 22 Feb 2007 21:38:11 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/02/22/152/</guid>
      <description>&lt;p&gt;На мой взгляд, &lt;a href=&#34;http://trac.edgewall.org/&#34;&gt;Trac&lt;/a&gt; – одна из лучших, если не самая лучшая, bug tracking система для малых и средних по размеру проектов. Особая прелесть Trac состоит в том, что она органично объединяет вики, интеграцию с &lt;a href=&#34;http://subversion.tigris.org/&#34;&gt;Subversion&lt;/a&gt; и ведение списка задач/ошибок. Именно то, что нужно команде для ведения проекта. Более того, стандартная функциональность позволяет организовать рецензирование кода, не смотря на то, что никакой специальной поддержки рецензирования в Trac нет.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Рецензирование кода (code review)</title>
      <link>https://blog.not-a-kernel-guy.com/2007/02/21/151/</link>
      <pubDate>Wed, 21 Feb 2007 01:24:25 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/02/21/151/</guid>
      <description>&lt;p&gt;Рецензирование кода (перевод подсмотрел у &lt;a href=&#34;http://alexlebedev.com/blog/walking-on-the-rake-2/&#34;&gt;Лебедева&lt;/a&gt;) – это на мой взгляд одна из полезнейших и при этом наиболее легко внедряемых практик разработки надёжного кода. Основная идея рецензирования заключается в систематической (пере)проверке кода с целью найти ошибки, допущенные при его написании. И поскольку рецензирование кода относится к ранним этапам разработки, найденные ошибки «ценнее», чем, скажем, ошибки, найденные при формальном тестировании.
Я не буду останавливаться на подробном описании процедуры рецензирования. В Интернете можно найти массу материалов по теме. Вот, например, страница из &lt;a href=&#34;http://en.wikipedia.org/wiki/Code_review&#34;&gt;Википедии&lt;/a&gt;. Я же просто хочу поделиться своими наблюдениями.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Subversion Externals</title>
      <link>https://blog.not-a-kernel-guy.com/2007/01/15/134/</link>
      <pubDate>Mon, 15 Jan 2007 15:20:59 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/01/15/134/</guid>
      <description>Сегодня, вытягивая исходники WordPress, обратил внимание на такое сообщение:
... A 2.0.5\\wp-admin\\edit-form.php A 2.0.5\\wp-feed.php Fetching external item into &amp;#39;2.0.5\\wp-content\\plugins\\akismet&amp;#39; A 2.0.5\\wp-content\\plugins\\akismet\\akismet.gif A 2.0.5\\wp-content\\plugins\\akismet\\akismet.php Checked out external at revision 7355. Checked out revision 4731. Подобного я раньше не видел. Меня, собственно, заинтересовали слова “external item”. Оказалось, что Subversion позволяет включать в один репозиторий каталоги из других репозиториев. Фактически, Subversion поддерживает символические ссылки между репозиториями. Использование этого механизма может быть удобнее тех маленьких хитростей, про которые я писал в предыдущем посте на эту тему.</description>
    </item>
    
    <item>
      <title>Контроль сторонних библиотек с помощью Subversion</title>
      <link>https://blog.not-a-kernel-guy.com/2006/12/29/123/</link>
      <pubDate>Fri, 29 Dec 2006 12:00:17 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2006/12/29/123/</guid>
      <description>&lt;p&gt;&lt;em&gt;Я потратил пол часа, чтобы перевести фразу “managing project dependencies” на русский и всё равно вышло коряво&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Когда я начинал пользоваться &lt;a href=&#34;http://subversion.tigris.org/&#34;&gt;Subversion&lt;/a&gt;, по старой CVS-ой привычке не мог привыкнуть к тому, что в Subversion “всё, буквально всё,” делается копированием. “Всё” – это и копирование само по себе и создание веток (branches) и меток (tags). Кстати, отсутствие меток в чистом виде я не понимаю до сих пор. Возможно с архитектурной точки зрения это правильно, но с точки зрения пользователя это не удобно – поставив метку пользователь должен озаботится защитой вновь созданной ветки от изменений. Это можно сделать на уровне контроля доступа к репозиторию, но всё равно неудобно.&lt;/p&gt;
&lt;p&gt;Вернёмся к нашим баранам.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Инсталлятор Visual Studio 2005 SP1 смог бы обогнать улитку если бы не...</title>
      <link>https://blog.not-a-kernel-guy.com/2006/12/20/118/</link>
      <pubDate>Wed, 20 Dec 2006 21:33:06 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2006/12/20/118/</guid>
      <description>&amp;hellip; не создавал 4 копии самого себя в процессе инсталляции. Ken Johnson рассказывает в своём блоге почему инсталляция Visual Studio 2005 SP1 отнимает столько времени. Не иначе Mr. Smith из Матрицы резвится.</description>
    </item>
    
  </channel>
</rss>
