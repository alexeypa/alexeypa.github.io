<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Обработка Исключений on Алексей Пахунов</title>
    <link>https://blog.not-a-kernel-guy.com/tags/%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0-%D0%B8%D1%81%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B9/</link>
    <description>Recent content in Обработка Исключений on Алексей Пахунов</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Wed, 09 Jan 2013 23:09:16 -0800</lastBuildDate>
    <atom:link href="https://blog.not-a-kernel-guy.com/tags/%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0-%D0%B8%D1%81%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Трассировка описателей. Вторая серия</title>
      <link>https://blog.not-a-kernel-guy.com/2013/01/09/1456/</link>
      <pubDate>Wed, 09 Jan 2013 23:09:16 -0800</pubDate>
      <guid>https://blog.not-a-kernel-guy.com/2013/01/09/1456/</guid>
      <description>&lt;p&gt;Краткое содержание &lt;a href=&#34;https://blog.not-a-kernel-guy.com/2012/12/04/1437/&#34;&gt;первой части&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Не получается продолжить выполнение кода после того, как было сгенерировано исключение STATUS_INVALID_HANDLE - почему-то портится сохраненный контекст процессора. В частности, не сохраняются non-volatile регистры esi и edi.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Некто Indy засомневался в том, что происходит именно это. Следует сказать, что засомневался он не без оснований. На самом деле, способы возбудить исключение пользовательского режима из кода в ядре можно пересчитать по пальцам одной руки и все они формируют конекст процессора одинаково. Получается, что если бы регистры не сохранялись, то не работали бы все исключения, а не избирательно STATUS_INVALID_HANDLE.&lt;/p&gt;&#xA;&lt;p&gt;Покопавшись в отладчике я понял в чем дело.&lt;/p&gt;</description>
    </item>
    <item>
      <title>«Угон» потоков</title>
      <link>https://blog.not-a-kernel-guy.com/2010/05/04/812/</link>
      <pubDate>Tue, 04 May 2010 23:21:24 -0700</pubDate>
      <guid>https://blog.not-a-kernel-guy.com/2010/05/04/812/</guid>
      <description>&lt;p&gt;Бывает так, что требуется выполнить свой код в контексте произвольного потока. Либо в своем потоке, но в то время когда поток выполняет чужой код. Например, сборщик мусора может хотеть перехватить управление, даже если поток крутит бесконечный цикл. Один из методов перехвата – использование функций &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms679362%28VS.85%29.aspx&#34;&gt;GetThreadContext&lt;/a&gt; и &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms680632%28v=VS.85%29.aspx&#34;&gt;SetThreadContext&lt;/a&gt;. Эти функции позволяют манипулировать контекстом потока – т.е. состоянием регистров процессора, в том числе и указателем на текущую выполняемую инструкцию. В простейшем случае перехватчик приостанавливает поток, сохраняет текущий контекст, модифицирует EIP, чтобы тот показывал на нужный код, и снова запускает поток. При обратном переключении просто восстанавливается ранее сохраненный контекст и все. Метод простой, эффективный и … неработающий. :-)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exception Chain Validation (ECV, SEHOP)</title>
      <link>https://blog.not-a-kernel-guy.com/2009/10/10/647/</link>
      <pubDate>Sat, 10 Oct 2009 20:37:24 -0700</pubDate>
      <guid>https://blog.not-a-kernel-guy.com/2009/10/10/647/</guid>
      <description>&lt;p&gt;Structure Exception Handler (SEH) overwrite - один из популярных способов передачи управления на вредоносный код, внедренный через ту или иную уязвимость (обычно – переполнение буфера). Иными словами, это один из способов подхватить заразу на свой компьютер через непропатченый браузер просто зайдя куда-нибудь с &lt;a href=&#34;http://www.thehun.net&#34;&gt;http://www.thehun.net&lt;/a&gt; почитать Пушкина на сон грядущий.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Как работает «раскрутчик» стека в x64</title>
      <link>https://blog.not-a-kernel-guy.com/2008/10/27/364/</link>
      <pubDate>Mon, 27 Oct 2008 22:39:31 -0700</pubDate>
      <guid>https://blog.not-a-kernel-guy.com/2008/10/27/364/</guid>
      <description>&lt;p&gt;В комментариях к предыдущем посте про исключения верно заметили, что exception chain в TEB используется только в x86 коде. И x64, и ia64 exception chain не используют вообще. Как же, в таком случае, выполняется «раскрутка» стека при обработке исключения?&lt;/p&gt;</description>
    </item>
    <item>
      <title>А что, собственно, происходит, когда бросается исключение?</title>
      <link>https://blog.not-a-kernel-guy.com/2008/10/15/355/</link>
      <pubDate>Wed, 15 Oct 2008 19:46:41 -0700</pubDate>
      <guid>https://blog.not-a-kernel-guy.com/2008/10/15/355/</guid>
      <description>&lt;p&gt;Нет, ну в общих чертах понятно - процессор генерирует исключение, операционная система находит нужный обработчик и вызывает его. А что происходит, если посмотреть подробнее? В Windows происходит примерно следующее.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
