<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows Kernel on Алексей Пахунов</title>
    <link>https://blog.not-a-kernel-guy.com/tags/windows-kernel/</link>
    <description>Recent content in Windows Kernel on Алексей Пахунов</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Tue, 04 Dec 2012 23:23:13 -0800</lastBuildDate><atom:link href="https://blog.not-a-kernel-guy.com/tags/windows-kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Трассировка описателей (AKA handle tracing)</title>
      <link>https://blog.not-a-kernel-guy.com/2012/12/04/1437/</link>
      <pubDate>Tue, 04 Dec 2012 23:23:13 -0800</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2012/12/04/1437/</guid>
      <description>&lt;p&gt;Начиная с Windows XP в ядро встроена поддержка трассировки описателей ядра (AKA handle tracing). Включение трассировки имеет двойной эффект. Во-первых, все операции с ядерными описателями сохраняются в циклический буфер (откуда их можно потом прочитать). Во-вторых, при любой попытке использовать несуществующий описатель генерируется исключение STATUS_INVALID_HANDLE. Фактически, проверка корректности операций с описателями в &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/desktop/dd371695(v=vs.85).aspx&#34;&gt;Application Verifier&lt;/a&gt; - это тонкая обертка вокруг функций трассировки, предоставляемых ядром. Расширение отладчика !htrace - аналогично.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ошибка в книге Windows Internals</title>
      <link>https://blog.not-a-kernel-guy.com/2012/08/16/1405/</link>
      <pubDate>Thu, 16 Aug 2012 13:01:39 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2012/08/16/1405/</guid>
      <description>В новой редакции Windows Internals обнаружился старый-знакомый баг. Там приводится пример стека 32-х битной нити, выполняющейся под Wow64:

Иллюстрация сопровождается комментарием:
 An example of a Wow64 thread inside Microsoft Office Word 2007 is shown in Figure 5-13. The highlighted stack frame and all stack frames below it are the 32-bit stack frames from the 32-bit stack. The stack frames above the highlighted frame are on the 64-bit stack.</description>
    </item>
    
    <item>
      <title>РИТ&#43;&#43; 2011: Сетевая подсистема Windows глазами разработчика</title>
      <link>https://blog.not-a-kernel-guy.com/2011/04/26/1038/</link>
      <pubDate>Tue, 26 Apr 2011 02:25:23 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2011/04/26/1038/</guid>
      <description>Слайды моего доклада на РИТ++ 2011: Сетевая подсистема Windows глазами разработчика. Спасибо за внимание. ;-)
MD5: 9d095bbc517f564758ec98ca779fadd4 SHA1: 46bebb8991f5b977ffcf978f277eb82b3cc08140
PDF версия: Сетевая подсистема Windows глазами разработчика.
MD5: 74676d09b0fdf5fc87182eb814b9d997 SHA1: 8bd1aa1f3db39ac5fab1ede4bbb4b43a9a91e11e</description>
    </item>
    
    <item>
      <title>РИТ&#43;&#43;, секция «RootConf»</title>
      <link>https://blog.not-a-kernel-guy.com/2011/04/02/1015/</link>
      <pubDate>Sat, 02 Apr 2011 21:54:58 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2011/04/02/1015/</guid>
      <description>Меня пригласили выступить на конференции РИТ++ 2011, которая пройдет в Москве в конце апреля. Предварительная тема доклада: «Сетевая подсистема Windows глазами разработчика. Краткий, неполный и, в основном, неверный обзор. :-)» Я собираюсь рассказать о том, как работает ядерная часть сетевой подсистемы, как данные попадают в user mode и что с ними происходит по пути. Заходите на огонёк.</description>
    </item>
    
    <item>
      <title>NDIS, !ndiskd и DML</title>
      <link>https://blog.not-a-kernel-guy.com/2011/02/06/972/</link>
      <pubDate>Sun, 06 Feb 2011 22:19:08 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2011/02/06/972/</guid>
      <description>&lt;p&gt;На работе понадобилось написать драйвер для сетевой карты. Я этого раньше никогда не делал и вообще с &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms817945.aspx&#34;&gt;NDIS&lt;/a&gt; дела не имел. А тут такая возможность! Делюсь впечатлениями.&lt;/p&gt;
&lt;p&gt;В общем и целом NDIS мне понравился. Интерфейсы довольно логичны, хотя и многочисленны. Взаимосвязь между разными компонентами в большинстве случаев после недолгой медитации становится довольно очевидной. Все структуры снабжены заголовком с сигнатурой, версией и размером, что, помимо заботы об обратной совместимости, означает меньше проблем с отладкой. При необходимости нужную структуру можно просто найти в памяти.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>«Угон» потоков</title>
      <link>https://blog.not-a-kernel-guy.com/2010/05/04/812/</link>
      <pubDate>Tue, 04 May 2010 23:21:24 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2010/05/04/812/</guid>
      <description>&lt;p&gt;Бывает так, что требуется выполнить свой код в контексте произвольного потока. Либо в своем потоке, но в то время когда поток выполняет чужой код. Например, сборщик мусора может хотеть перехватить управление, даже если поток крутит бесконечный цикл. Один из методов перехвата – использование функций &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms679362%28VS.85%29.aspx&#34;&gt;GetThreadContext&lt;/a&gt; и &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms680632%28v=VS.85%29.aspx&#34;&gt;SetThreadContext&lt;/a&gt;. Эти функции позволяют манипулировать контекстом потока – т.е. состоянием регистров процессора, в том числе и указателем на текущую выполняемую инструкцию. В простейшем случае перехватчик приостанавливает поток, сохраняет текущий контекст, модифицирует EIP, чтобы тот показывал на нужный код, и снова запускает поток. При обратном переключении просто восстанавливается ранее сохраненный контекст и все. Метод простой, эффективный и … неработающий. :-)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>За последние две-три недели узнал много нового...</title>
      <link>https://blog.not-a-kernel-guy.com/2008/03/27/300/</link>
      <pubDate>Thu, 27 Mar 2008 21:40:52 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2008/03/27/300/</guid>
      <description>&lt;p&gt;За последние две-три недели узнал много нового про архитектуру amd64. Во-первых, я наткнулся сначала на документ, а затем на аналогичный &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/7kcdt6fy(VS.80).aspx&#34;&gt;раздел в MSDN&lt;/a&gt;, где толково описаны не только &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/9b372w95%28VS.80%29.aspx&#34;&gt;соглашения о вызовах&lt;/a&gt; (этого добра везде навалом), но и дано детальное описание того, как должен выглядеть &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/x4ea06t0%28VS.80%29.aspx&#34;&gt;стек функции&lt;/a&gt;, как происходит &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/8ydc79k6(VS.80).aspx&#34;&gt;раскрутка стека&lt;/a&gt;, что такое и зачем нужны &lt;a href=&#34;http://msdn2.microsoft.com/en-us/library/tawsa7cb%28VS.80%29.aspx&#34;&gt;пролог и эпилог функции&lt;/a&gt;. Полезный документ, особенно если нужно разобраться как работает stack unwinder.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
