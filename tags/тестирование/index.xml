<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Тестирование on Алексей Пахунов</title>
    <link>https://blog.not-a-kernel-guy.com/tags/%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/</link>
    <description>Recent content in Тестирование on Алексей Пахунов</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Sun, 05 Aug 2018 18:44:25 -0700</lastBuildDate><atom:link href="https://blog.not-a-kernel-guy.com/tags/%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Текстовые данные в юнит тестах</title>
      <link>https://blog.not-a-kernel-guy.com/2018/08/05/text-data/</link>
      <pubDate>Sun, 05 Aug 2018 18:44:25 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2018/08/05/text-data/</guid>
      <description>&lt;p&gt;В предыдущем посте про &lt;a href=&#34;https://blog.not-a-kernel-guy.com/2018/08/01/table-driven-unit-tests/&#34;&gt;табличные юнит тесты&lt;/a&gt; я рассказал про способ
улучшения читаемости однообразных юнит тестов. Там же мне в комментариях
аналогичных примеров из существующих фреймворков накидали. Теперь давайте
посмотрим как этот способ сделать еще лучше.&lt;/p&gt;
&lt;p&gt;Основная идея была очень проста. Есть повторяющийся, очень монотонный код
тестов. Чтобы сделать его читаемым, пишется универсальное тело теста, а все
необходимые вариации описываются параметрами. Параметры упаковываются в таблицу,
что очень важно для улучшения читаемости. Когда все параметры собраны в одном
месте (в пределах одного экрана), анализировать поведение тестируемого кода
легче, чем когда параметры разбросаны по файлу длиной в сотни строк.&lt;/p&gt;
&lt;p&gt;Как сделать код еще более понятным? К примеру, возьмем таблицу из предыдущего
поста. Что с ней не так?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string that_thing;
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string this_key;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; result;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; cases[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thing1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;, false},
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thing1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;, false},
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thing1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;, false},
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thing1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;, true },
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thing2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key1&amp;#34;&lt;/span&gt;, false},
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thing2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,     false},
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;thing2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,     true },
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,     false},
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,     true },
    {&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,     false},
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;В этой таблице слишком много знаков препинания: скобки, запятые, кавычки.
К параметрам в этой таблице неудобно писать комментарии и еще сложнее подружить
удобно выровненные колонки с &lt;a href=&#34;https://clang.llvm.org/docs/ClangFormat.html&#34;&gt;&lt;code&gt;clang-format&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;clang-format off&lt;/code&gt; - это
единственный выход). Более того, столкнувшись с реальностью, подобная таблица
станет еще менее читаемой - колонки вылезут за правый край экрана, выравнивание
будет принесено в жертву более компактной записи и т.д.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Табличные юнит тесты</title>
      <link>https://blog.not-a-kernel-guy.com/2018/08/01/table-driven-unit-tests/</link>
      <pubDate>Wed, 01 Aug 2018 19:52:48 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2018/08/01/table-driven-unit-tests/</guid>
      <description>&lt;p&gt;Расскажу об одной технике, которая, как мне кажется, позволяет писать более
понятные и читаемые юнит тесты. Начну немного издалека. Допустим мы хотим
убедится, что определенный кусок кода работает правильно. Если бы мы имели дело
с игрушечным примером, то это наш тест мог бы Примерно вот так:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foobar&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ((x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;ASSERT_FALSE(foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
ASSERT_FALSE(foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
ASSERT_FALSE(foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
ASSERT_TRUE (foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;));
ASSERT_FALSE(foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
ASSERT_FALSE(foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
ASSERT_TRUE (foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
ASSERT_FALSE(foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
ASSERT_TRUE (foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
ASSERT_FALSE(foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Такой тест достаточно легко читать. Достаточно понять конструкцию
&lt;code&gt;ASSERT_XXX(foobar(...))&lt;/code&gt; после чего глаза сами фокусируются на входных
значениях, автоматически отсеивая ненужный синтаксический мусор.&lt;/p&gt;
&lt;p&gt;Однако, если взять реальный код, то подобный пример превратиться в гораздо менее
удобочитаемого монстра:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Foobar&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; rabbit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
    create_foobar_with_abc(parent,
        some_context,
        more_stuff &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; that &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; is_required &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; to_create_foobar,
        a,
        b,
        mock_c(),
        logger);

ASSERT_TRUE(
    rabbit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;connect(
        this_thing,
        that_key,
        did_you_think_we_are_done_here &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; no : hell_no));

ASSERT_TRUE(rabbit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;wait_for_accept(timeout));

ASSERT_FALSE(rabbit&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;foobar(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip; и так далее для каждого тест кейса. Подобный код легко превращается в
длинную простыню однообразного текста с незаметными, но важными вариациями во
входных данных или параметрах инициализации.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Про то, как мы один тест запускали…</title>
      <link>https://blog.not-a-kernel-guy.com/2011/12/21/1241/</link>
      <pubDate>Wed, 21 Dec 2011 23:14:49 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2011/12/21/1241/</guid>
      <description>Проект, над которым я сейчас работаю, небольшой. Экспериментальная железка, драйвер, вспомогательный сервис, скрипты всякие. Пишут это все два с половиной человека: я, да полтора землекопаконтрактника. Дописали мы все это до состояния, когда уже можно запускать стресс тесты – отлавливать гонки, редкие баги, глюки железа и прочие нехитрые радости разработчика. Само собой, первые несколько ошибок поймали, пока ещё отлаживали скрипты для автоматического запуска тестов.
Далее идет хронология с момента первого официального запуска стресс теста.</description>
    </item>
    
    <item>
      <title>Возвращаясь к теме про фаззеры</title>
      <link>https://blog.not-a-kernel-guy.com/2008/01/31/285/</link>
      <pubDate>Thu, 31 Jan 2008 23:02:43 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2008/01/31/285/</guid>
      <description>&lt;p&gt;Вот код, которым я пользуюсь для написания стресс тестов и фаззеров в своих проектах. Класс EntropyGenerator - обертка вокруг генератора случайных чисел.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>И кнопочку «Повтор» не забудьте!</title>
      <link>https://blog.not-a-kernel-guy.com/2007/12/25/273/</link>
      <pubDate>Tue, 25 Dec 2007 16:03:51 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2007/12/25/273/</guid>
      <description>&lt;p&gt;Юнит тесты, в отличие от многих других видов тестирования, обладают одной замечательной особенностью. Они обеспечивают практически 100% (a в теории - так точно 100%) повторяемость результатов. Грубо говоря, после успешного прогона тестов можно с уверенностью говорить, что покрываемые тестами сценарии работают. Гарантированная повторяемость важна для обнаружения быстрого регрессий, рефакторинга кода и множества других вещей. Как обычно, окунание в реальность сильно портит эту радужную картину.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Эффективные юнит тесты. Часть II</title>
      <link>https://blog.not-a-kernel-guy.com/2006/08/08/36/</link>
      <pubDate>Tue, 08 Aug 2006 23:02:00 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2006/08/08/36/</guid>
      <description>&lt;p&gt;Реализация &lt;a href=&#34;https://blog.not-a-kernel-guy.com/2006/08/EffectiveUnitTests.cpp&#34;&gt;алгоритма&lt;/a&gt;, описанного в &lt;a href=&#34;https://blog.not-a-kernel-guy.com/2006/08/06/37/&#34;&gt;первой части&lt;/a&gt;. В принципе исходный код говорит сам за себя. Остановлюсь на некоторых деталях.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Эффективные юнит тесты. Часть I</title>
      <link>https://blog.not-a-kernel-guy.com/2006/08/06/37/</link>
      <pubDate>Sun, 06 Aug 2006 08:08:00 -0700</pubDate>
      
      <guid>https://blog.not-a-kernel-guy.com/2006/08/06/37/</guid>
      <description>&lt;p&gt;Простой способ сократить число юнит тестов и сохранить 100% покрытие кода - разбить тесты на элементарные случаи и перебрать все комбинации. Этот способ хорошо подходит для тестирования отдельных функций и методов.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
