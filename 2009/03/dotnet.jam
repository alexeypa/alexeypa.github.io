# Copyright (c) 2009 Alexey Pakhunov.
#
# Use, modification and distribution is subject to the Boost Software
# License Version 1.0. (See accompanying file LICENSE_1_0.txt or
# http://www.boost.org/LICENSE_1_0.txt)

import "class" : new ;
import common  ;
import feature ;
import generators  ;
import modules ;
import path ;
import os ;
import toolset ;
import type ;

# Initialize a specific toolset version configuration. For example, you might
# have:
#
#    using dotnet : 2.0 ;
#
# The version parameter may be ommited. This will cause the latest avaialble
# version of .NET framework will be used:
#
#    using dotnet ;
#
# The following keywords have special meanings when specified as versions:
#   - all     - all detected but not yet used versions will be marked as used
#               with their default options.
#   - default - this is an equivalent to an empty version.
#
rule init ( version ? )
{
    version ?= "default" ;
    configure $(version) ;
}

rule configure ( version )
{
    local all-versions = [ $(.versions).all ] ;
    switch $(version)
    {
        case "all" :
            # Configure (i.e. mark as used) all registered versions.
            for local v in $(all-versions)
            {
                # Note that there is no need to skip already configured
                # versions here as this will request configure-really rule
                # to configure the version using default options which will
                # in turn cause it to simply do nothing in case the version
                # has already been configured.
                configure-really $(v) ;
            }

        case "default" :
            # Decide what the 'default' version is.
            if $(all-versions)
            {
                # Take the highest auto-detected version.
                local versions = [ SORT $(all-versions) ] ;
                configure-really $(versions[-1]) ;
            }
            else
            {
                errors.error ".NET Framework is not found." ;
            }

        case * :
            if $(version) in $(all-versions)
            {
                configure-really $(version) ;
            }
            else
            {
                errors.error ".NET Framework version '$(version)' is not found." ;
            }
    }
}

# Worker rule for toolset version configuration. Takes an explicit version id or
# nothing in case it should configure the default toolset version (the first
# registered one or a new 'default' one in case no toolset versions have been
# registered yet).
#
local rule configure-really ( version )
{
    # Check whether the selected configuration is already in use.
    if ! $(version) in [ $(.versions).used ]
    {
        # Mark the configuration as 'used'.
        $(.versions).use $(version) ;

        # Generate conditions and save them.
        local conditions =
            [ common.check-init-parameters dotnet : version $(version) ] ;
        $(.versions).set $(version) : conditions : $(conditions) ;

        # Get auto-detected options.
        local options = [ $(.versions).get $(version) : options ] ;

        # Get framework path.
        local path = [ feature.get-values <path> : $(options) ] ;

        cscompiler = [ path.join $(path) "csc.exe" ] ;
        vbcompiler = [ path.join $(path) "vbc.exe" ] ;

        toolset.flags dotnet.compile .CSC $(conditions) : $(cscompiler) /nologo ;
        toolset.flags dotnet.compile .VBC $(conditions) : $(vbcompiler) /nologo ;
    }
}

rule compile.exe.csc ( targets + : sources * : properties * )
{
    .C on $(targets[1]) = [ on $(targets[1]) return $(.CSC) ] ;
    compile $(targets) : $(sources) : $(properties) ;
}

rule compile.dll.csc ( targets + : sources * : properties * )
{
    .C on $(targets[1]) = [ on $(targets[1]) return $(.CSC) ] ;
    compile $(targets) : $(sources) : $(properties) ;
}

rule compile.exe.vbc ( targets + : sources * : properties * )
{
    .C on $(targets[1]) = [ on $(targets[1]) return $(.VBC) ] ;
    compile $(targets) : $(sources) : $(properties) ;
}

rule compile.dll.vbc ( targets + : sources * : properties * )
{
    .C on $(targets[1]) = [ on $(targets[1]) return $(.VBC) ] ;
    compile $(targets) : $(sources) : $(properties) ;
}

rule compile ( targets + : sources * : properties * )
{
    local library-files = [ on $(<) return $(LIBRARY_FILES) ] ;
    if $(library-files)
    {
        DEPENDS $(<) : $(library-files) ;
    }

    RSPLINE on $(targets[1]) = [ on $(targets[1]) 
        return $(FLAGS) /define:"$(DEFINES)" $(.nl)/lib:\"$(LIBPATH)\" $(.nl)/reference:\"$(REFERENCES)\" ] ;
}

actions compile bind LIBRARY_FILES
{
    $(.C) @"@($(<[1]:W).rsp:E=$(RSPLINE) $(.nl)/out:"$(<[1])" $(.nl)/reference:"$(LIBRARY_FILES)" $(.nl)"$(>)")"
}


# Composing generator that converts all sources of type SHARED_LIB into 
# <library-file> entries.
#
class dotnet-generator : generator
{
    import property-set : create ;

    rule __init__ ( id : source-types + : target-types + : requirements * )
    {
        generator.__init__ $(id) true : $(source-types) : $(target-types) : $(requirements) ;
    }

    # Removes all SHARED_LIB from sources and puts them to the property set as
    # <library-file> entries.
    #
    rule run ( project name ? : property-set : sources + )
    {
        local references ;
        local actual-sources ;

        for local s in $(sources)
        {
            if [ type.is-derived [ $(s).type ] SHARED_LIB ]
            {
                references += $(s) ;
            }
            else
            {
                actual-sources += $(s) ;
            }
        }
        
        return
            [ generator.run 
                    $(project) $(name) 
                : 
                    [ property-set.create
                        <library-file>$(references)
                        [ $(property-set).raw ]
                    ]
                : 
                    $(actual-sources)
            ] ;
    }

    # Generates additonal PDB target when <debug-symbols> is "on".
    #
    rule generated-targets ( sources + : property-set : project name ? )
    {
        local result = [ generator.generated-targets
            $(sources) : $(property-set) : $(project) $(name) ] ;

        if $(result)
        {
            local name = [ $(result[0]).name ] ;
            local action = [ $(result[0]).action ] ;

            if [ $(property-set).get <debug-symbols> ] = "on"
            {
                local target = [ class.new file-target $(name:S=) : PDB : $(project) : $(action) ] ;
                local registered-target = [ virtual-target.register $(target) ] ;
                if $(action) && ( $(target) != $(registered-target) )
                {
                    $(action).replace-targets $(target) : $(registered-target) ;
                }
                result += $(registered-target) ;
            }
        }
        return $(result) ;
    }
}

# Registers this toolset including all of its flags, features & generators. Does
# nothing on repeated calls.
#
rule register-toolset ( )
{
    if ! dotnet in [ feature.values toolset ]
    {
        register-toolset-really ;
    }
}

# Unsafe worker rule for the register-toolset() rule. Must not be called
# multiple times.
#
local rule register-toolset-really ( )
{
    feature.extend toolset : dotnet ;

    type.register CS : cs ;
    type.register VB : vb ;

    if ! [ type.registered PDB ]
    {
        type.register PDB : pdb ;
    }

    # Declare generators.
    generators.register [ new dotnet-generator dotnet.compile.exe.csc : CS SHARED_LIB : EXE : <toolset>dotnet ] ;
    generators.register [ new dotnet-generator dotnet.compile.exe.vbc : VB SHARED_LIB : EXE : <toolset>dotnet ] ;
    generators.register [ new dotnet-generator dotnet.compile.dll.csc : CS SHARED_LIB : SHARED_LIB : <toolset>dotnet ] ;
    generators.register [ new dotnet-generator dotnet.compile.dll.vbc : VB SHARED_LIB : SHARED_LIB : <toolset>dotnet ] ;

    toolset.flags dotnet.compile.exe FLAGS <user-interface>console : /target:exe ;
    toolset.flags dotnet.compile.exe FLAGS <user-interface>gui : /target:winexe ;
    toolset.flags dotnet.compile.dll FLAGS : /target:library ;
    
    toolset.flags dotnet.compile FLAGS $(.cpu-arch-anycpu) : /platform:anycpu ;
    toolset.flags dotnet.compile FLAGS $(.cpu-arch-x86) : /platform:x86 ;
    toolset.flags dotnet.compile FLAGS $(.cpu-arch-x64) : /platform:x64;
    toolset.flags dotnet.compile FLAGS $(.cpu-arch-ia64) : /platform:Itanium ;

    toolset.flags dotnet.compile FLAGS <debug-symbols>on : /debug+ ;
    toolset.flags dotnet.compile FLAGS <debug-symbols>off : /debug- ;

    toolset.flags dotnet.compile FLAGS <optimization>off : /optimize- ;
    toolset.flags dotnet.compile FLAGS <optimization>speed : /optimize+ ;
    toolset.flags dotnet.compile FLAGS <optimization>space : /optimize+ ;

    toolset.flags dotnet.compile FLAGS <warnings>on : /warn:4 ;
    toolset.flags dotnet.compile FLAGS <warnings>off : /warn:0 ;
    toolset.flags dotnet.compile FLAGS <warnings>all : /warn:4 ;
    toolset.flags dotnet.compile FLAGS <warnings-as-errors>on : /warnaserror ;

    toolset.flags dotnet.compile DEFINES <define> ;
    toolset.flags dotnet.compile LIBPATH <library-path> ;
    toolset.flags dotnet.compile REFERENCES : <find-shared-library> ;
    toolset.flags dotnet.compile LIBRARY_FILES : <library-file> ;
}

# Validates given path, registers found configuration and prints debug
# information about it.
#
local rule register-configuration ( version : path ? )
{
    if $(path)
    {
        local csc = [ GLOB $(path) : csc.exe ] ;

        if $(csc)
        {
            if [ $(.versions).register $(version) ]
            {
                $(.versions).set $(version) : options : <path>$(path) ;
            }
        }
    }
}

local rule auto-detect-toolset-versions ( )
{
    if [ os.name ] in NT CYGWIN
    {
        local dotnet = [ path.join [ modules.peek : windir ] Microsoft.NET ] ;
        local frameworks = [ path.join $(dotnet) Framework64 ] [ path.join $(dotnet) Framework ] ;

        local found = [ path.glob $(frameworks) : v*.* ] ;
        for local p in $(found)
        {
            local v = [ MATCH "v([0-9]+\.[0-9]+)" : [ path.basename $(p) ] ] ;
            if $(v)
            {
                register-configuration $(v) : [ path.native $(p) ] ;
            }
        }

        if $(.debug-configuration)
        {
            for local v in [ $(.versions).all ]
            {
                local options = [ $(.versions).get $(v) : options ] ;
                local path = [ feature.get-values <path> : $(options) ] ;
                ECHO "notice: [dotnet-cfg] dotnet-$(v) detected, path: '$(path)'" ;
            }
        }
    }
}

################################################################################
#
#   Startup code executed when loading this module.
#
################################################################################

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
    .debug-configuration = true ;
}

.nl = "
" ;

# Supported CPU architectures.
.cpu-arch-anycpu =
    <architecture>/<address-model> ;

.cpu-arch-x86 =
    <architecture>/<address-model>32
    <architecture>x86/<address-model>
    <architecture>x86/<address-model>32 ;

.cpu-arch-x64 =
    <architecture>/<address-model>64
    <architecture>x86/<address-model>64 ;

.cpu-arch-ia64 =
    <architecture>ia64/<address-model>
    <architecture>ia64/<address-model>64 ;

# List of all registered configurations.
.versions = [ new configurations ] ;

# Auto-detect all the available .NET installations on the system.
auto-detect-toolset-versions ;

# And finally trigger the actual Boost Build toolset registration.
register-toolset ;
